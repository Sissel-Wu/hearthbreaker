{"source": "Assassin's Blade NAME_END 3 ATK_END -1 DEF_END 5 COST_END 4 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class AssassinsBlade(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Assassin's Blade\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 4)\u00a7"}
{"source": "Boulderfist Ogre NAME_END 6 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "target": "class BoulderfistOgre(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boulderfist Ogre\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 7)\u00a7"}
{"source": "Deadly Poison NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your weapon +2 Attack.", "target": "class DeadlyPoison(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deadly Poison\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        player.weapon.base_attack += 2\u00a7        player.hero.change_temp_attack(2)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and player.weapon is not None\u00a7"}
{"source": "Fire Elemental NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 3 damage.", "target": "class FireElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fire Elemental\", 6, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5)\u00a7"}
{"source": "Gnomish Inventor NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Draw a card.", "target": "class GnomishInventor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnomish Inventor\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Draw(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7"}
{"source": "Heroic Strike NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +4 Attack this turn.", "target": "class HeroicStrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Heroic Strike\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.change_temp_attack(4)\u00a7"}
{"source": "Ironbark Protector NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class IronbarkProtector(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironbark Protector\", 8, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, taunt=True)\u00a7"}
{"source": "Mark of the Wild NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b>Taunt</b> and +2/+2.<i> (+2 Attack/+2 Health)</i>", "target": "class MarkOfTheWild(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mark of the Wild\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(2)\u00a7        self.target.increase_health(2)\u00a7        self.target.taunt = True\u00a7"}
{"source": "Multi-Shot NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to two random enemy minions.", "target": "class MultiShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Multi-Shot\", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        for i in range(0, 2):\u00a7            target = game.random_choice(targets)\u00a7            targets.remove(target)\u00a7            target.damage(player.effective_spell_damage(3), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 2\u00a7"}
{"source": "Power Word: Shield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +2 Health. NL Draw a card.", "target": "class PowerWordShield(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Power Word: Shield\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.increase_health(2)\u00a7        player.draw()\u00a7"}
{"source": "Sen'jin Shieldmasta NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Taunt</b>", "target": "class SenjinShieldmasta(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sen'jin Shieldmasta\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True)\u00a7"}
{"source": "Sinister Strike NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to the enemy hero.", "target": "class SinisterStrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sinister Strike\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        game.other_player.hero.damage(player.effective_spell_damage(3), self)\u00a7"}
{"source": "Succubus NAME_END 4 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b>Battlecry:</b> Discard a random card.", "target": "class Succubus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Succubus\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Discard(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": "War Golem NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class WarGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"War Golem\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7"}
{"source": "Acidmaw NAME_END 4 ATK_END 2 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever another minion takes damage, destroy it.", "target": "class Acidmaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Acidmaw\", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, effects=[Effect(CharacterDamaged(MinionIsNotTarget(), BothPlayer()), [ActionTag(Kill(), TargetSelector())])])\u00a7"}
{"source": "Boar NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END <b>Charge</b>", "target": "class Boar(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boar\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Anodized Robo Cub NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Taunt</b>. <b>Choose One -</b> NL +1 Attack; or +1 Health.", "target": "class AnodizedRoboCub(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anodized Robo Cub\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, choices=[Choice(AttackMode(), Give([Buff(ChangeAttack(1))]), SelfSelector()), Choice(TankMode(), Give([Buff(ChangeHealth(1))]), SelfSelector())])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, taunt=True)\u00a7"}
{"source": "Burrowing Mine NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END When you draw this, it explodes. You take 10 damage and draw a card.", "target": "class BurrowingMine(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Burrowing Mine\", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False, effects=[Effect(Drawn(), ActionTag(Damage(10), HeroSelector())), Effect(Drawn(), ActionTag(RemoveFromHand(Same()), PlayerSelector())), Effect(Drawn(), ActionTag(Draw(), PlayerSelector()))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7"}
{"source": "Crackle NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3-$6 damage. <b>Overload:</b> (1)", "target": "class Crackle(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crackle\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(game.random_amount(3, 6)), self)\u00a7"}
{"source": "Emergency Coolant NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Freeze</b> a minion.", "target": "class EmergencyCoolant(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emergency Coolant\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7"}
{"source": "Flying Machine NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Windfury</b>", "target": "class FlyingMachine(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flying Machine\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, windfury=True)\u00a7"}
{"source": "Goblin Auto-Barber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Battlecry</b>: Give your weapon +1 Attack.", "target": "class GoblinAutoBarber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goblin Auto-Barber\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(IncreaseWeaponAttack(1), WeaponSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Iron Sensei NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, give another friendly Mech +2/+2.", "target": "class IronSensei(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Iron Sensei\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(TurnEnded(), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))])\u00a7"}
{"source": "Mal'Ganis NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Your other Demons have +2/+2. NL Your hero is <b>Immune</b>.", "target": "class MalGanis(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mal'Ganis\", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, auras=[Aura(ChangeHealth(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.DEMON))), Aura(Immune(), HeroSelector())])\u00a7"}
{"source": "Mistress of Pain NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END Whenever this minion deals damage, restore that much Health to your hero.", "target": "class MistressOfPain(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mistress of Pain\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(DidDamage(), ActionTag(Heal(EventValue()), HeroSelector()))])\u00a7"}
{"source": "Powermace NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Deathrattle</b>: Give a random friendly Mech +2/+2.", "target": "class Powermace(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Powermace\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 2, deathrattle=Deathrattle(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=RandomPicker())))\u00a7"}
{"source": "Screwjank Clunker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Battlecry</b>: Give a friendly Mech +2/+2.", "target": "class ScrewjankClunker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Screwjank Clunker\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5)\u00a7"}
{"source": "Sneed's Old Shredder NAME_END 5 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Deathrattle:</b> Summon a random legendary minion.", "target": "class SneedsOldShredder(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sneed's Old Shredder\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, deathrattle=Deathrattle(Summon(CollectionSource([IsRarity(CARD_RARITY.LEGENDARY), IsMinion()])), PlayerSelector()))\u00a7"}
{"source": "Toshley NAME_END 5 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry and Deathrattle:</b> Add a <b>Spare Part</b> card to your hand.", "target": "class Toshley(MinionCard):\u00a7    def __init__(self):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        super().__init__(\"Toshley\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(AddCard(CardList(spare_part_list)), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        return Minion(5, 7, deathrattle=Deathrattle(AddCard(CardList(spare_part_list)), PlayerSelector()))\u00a7"}
{"source": "Warbot NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Enrage:</b> +1 Attack.", "target": "class Warbot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Warbot\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, enrage=[Aura(ChangeAttack(1), SelfSelector())])\u00a7"}
{"source": "Deathlord NAME_END 2 ATK_END 8 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt. Deathrattle:</b> Your opponent puts a minion from their deck into the battlefield.", "target": "class Deathlord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deathlord\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 8, taunt=True, deathrattle=Deathrattle([RemoveFromDeck(DeckSource(FriendlyPlayer(), [IsMinion()])), Summon(Same())], PlayerSelector(EnemyPlayer())))\u00a7"}
{"source": "Nerub'ar Weblord NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Minions with <b>Battlecry</b> cost (2) more.", "target": "class NerubarWeblord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerub'ar Weblord\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, auras=[Aura(ManaChange(2), CardSelector(BothPlayer(), HasBattlecry()))])\u00a7"}
{"source": "Spectral Knight NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "target": "class SpectralKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spectral Knight\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 6, spell_targetable=False)\u00a7"}
{"source": "Wailing Soul NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry: Silence</b> your other minions.", "target": "class WailingSoul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wailing Soul\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Silence(), MinionSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5)\u00a7"}
{"source": "Amani Berserker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Enrage:</b> +3 Attack", "target": "class AmaniBerserker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Amani Berserker\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, enrage=[Aura(ChangeAttack(3), SelfSelector())])\u00a7"}
{"source": "Archmage Antonidas NAME_END 5 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a spell, add a 'Fireball' spell to your hand.", "target": "class ArchmageAntonidas(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Archmage Antonidas\", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, effects=[Effect(SpellCast(), ActionTag(AddCard(hearthbreaker.cards.Fireball()), PlayerSelector()))])\u00a7"}
{"source": "Bananas NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1/+1.", "target": "class Bananas(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bananas\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(1)\u00a7        self.target.increase_health(1)\u00a7"}
{"source": "Blessed Champion NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Double a minion's Attack.", "target": "class BlessedChampion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessed Champion\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(DoubleAttack()))\u00a7"}
{"source": "Cabal Shadow Priest NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Take control of an enemy minion that has 2 or less Attack.", "target": "class CabalShadowPriest(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cabal Shadow Priest\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Steal(), MinionSelector(AttackLessThanOrEqualTo(2), players=EnemyPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7"}
{"source": "Cone of Cold NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> a minion and the minions next to it, and deal $1 damage to them.", "target": "class ConeOfCold(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cone of Cold\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7        index = self.target.index\u00a7\u00a7        if self.target.index < len(self.target.player.minions) - 1:\u00a7            minion = self.target.player.minions[index + 1]\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7            minion.add_buff(Buff(Frozen()))\u00a7\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7\u00a7        if self.target.index > 0:\u00a7            minion = self.target.player.minions[index - 1]\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7            minion.add_buff(Buff(Frozen()))\u00a7"}
{"source": "Defender of Argus NAME_END 2 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give adjacent minions +1/+1 and <b>Taunt</b>.", "target": "class DefenderOfArgus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defender of Argus\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([ Buff(Taunt()), Buff(ChangeAttack(1)), Buff(ChangeHealth(1)) ]), MinionSelector(Adjacent())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Doomhammer NAME_END 2 ATK_END -1 DEF_END 5 COST_END 8 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Windfury, Overload:</b> (2)", "target": "class Doomhammer(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Doomhammer\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=2)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 8, buffs=[Buff(Windfury())])\u00a7"}
{"source": "Earth Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Silence</b> a minion, then deal $1 damage to it.", "target": "class EarthShock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Earth Shock\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.silence()\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7"}
{"source": "Eye for an Eye NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero takes damage, deal that much damage to the enemy hero.", "target": "class EyeForAnEye(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Eye for an Eye\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, character, attacker, amount):\u00a7        if character.is_hero():\u00a7            character.player.opponent.hero.damage(amount, self)\u00a7        super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"character_damaged\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"character_damaged\", self._reveal)\u00a7"}
{"source": "Flare NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END All minions lose <b>Stealth</b>. Destroy all enemy <b>Secrets</b>. Draw a card.", "target": "class Flare(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flare\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in hearthbreaker.targeting.find_minion_spell_target(game, lambda m: m.stealth):\u00a7            minion.stealth = False\u00a7\u00a7        for secret in game.other_player.secrets:\u00a7            secret.deactivate(game.other_player)\u00a7\u00a7        game.other_player.secrets = []\u00a7        player.draw()\u00a7"}
{"source": "Gorehowl NAME_END 7 ATK_END -1 DEF_END 7 COST_END 1 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Attacking a minion costs 1 Attack instead of 1 Durability.", "target": "class Gorehowl(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gorehowl\", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(7, 1, effects=[Effect(CharacterAttack(And(IsHero(), TargetIsMinion())), [ActionTag(IncreaseDurability(), WeaponSelector()), ActionTag(IncreaseWeaponAttack(-1), WeaponSelector()), ActionTag(Give(BuffUntil(ChangeAttack(1), AttackCompleted())), HeroSelector())])])\u00a7"}
{"source": "Hound NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END NIL RARITY_END <b>Charge</b>", "target": "class Hound(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hound\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, charge=True)\u00a7"}
{"source": "Injured Blademaster NAME_END 4 ATK_END 7 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 4 damage to HIMSELF.", "target": "class InjuredBlademaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Injured Blademaster\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7)\u00a7"}
{"source": "Knife Juggler NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you summon a minion, deal 1 damage to a random enemy.", "target": "class KnifeJuggler(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Knife Juggler\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, effects=[Effect(AfterAdded(), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])\u00a7"}
{"source": "Lightwell NAME_END 0 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the start of your turn, restore 3 Health to a damaged friendly character.", "target": "class Lightwell(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightwell\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 5, effects=[Effect(TurnStarted(), ActionTag(Heal(3), CharacterSelector(condition=IsDamaged(), picker=RandomPicker())))])\u00a7"}
{"source": "Mana Wyrm NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you cast a spell, gain +1 Attack.", "target": "class ManaWyrm(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Wyrm\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7"}
{"source": "Mogu'shan Warden NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class MogushanWarden(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mogu'shan Warden\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 7, taunt=True)\u00a7"}
{"source": "Nourish NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One</b> - Gain 2 Mana Crystals; or Draw 3 cards.", "target": "class Nourish(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nourish\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        class Gain2(ChoiceCard):\u00a7\u00a7            def __init__(self):\u00a7                super().__init__(\"Gain 2 mana crystals\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def use(self, player, game):\u00a7                if player.max_mana < 8:\u00a7                    player.max_mana += 2\u00a7                    player.mana += 2\u00a7                else:\u00a7                    player.max_mana = 10\u00a7                    player.mana += 2\u00a7\u00a7        class Draw3(ChoiceCard):\u00a7\u00a7            def __init__(self):\u00a7                super().__init__(\"Draw three cards\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def use(self, player, game):\u00a7                player.draw()\u00a7                player.draw()\u00a7                player.draw()\u00a7\u00a7        option = player.agent.choose_option([Gain2(), Draw3()], player)\u00a7        option.use(player, game)\u00a7"}
{"source": "Preparation NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END The next spell you cast this turn costs (3) less.", "target": "class Preparation(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Preparation\", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.add_aura(AuraUntil(ManaChange(-3), CardSelector(condition=IsSpell()), SpellCast()))\u00a7"}
{"source": "Repentance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your opponent plays a minion, reduce its Health to 1.", "target": "class Repentance(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Repentance\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, minion):\u00a7\u00a7        minion.set_health_to(1)\u00a7        super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"minion_played\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"minion_played\", self._reveal)\u00a7"}
{"source": "Shadow of Nothing NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Mindgames whiffed! Your opponent had no minions!", "target": "class ShadowOfNothing(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow of Nothing\", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(0, 1)\u00a7"}
{"source": "Slam NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it survives, draw a card.", "target": "class Slam(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Slam\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health > player.effective_spell_damage(2) or self.target.divine_shield:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7            player.draw()\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Spellbreaker NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> <b>Silence</b> a minion.", "target": "class Spellbreaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spellbreaker\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": "Sunfury Protector NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give adjacent minions <b>Taunt</b>.", "target": "class SunfuryProtector(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sunfury Protector\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(Buff(Taunt())), MinionSelector(Adjacent())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Tinkmaster Overspark NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Transform another random minion into a 5/5 Devilsaur or a 1/1 Squirrel.", "target": "class TinkmasterOverspark(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tinkmaster Overspark\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Transform(CardList([Devilsaur(), Squirrel()])), MinionSelector(players=BothPlayer(), picker=RandomPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Vaporize NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When a minion attacks your hero, destroy it.", "target": "class Vaporize(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vaporize\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if target is self.player.hero and attacker.is_minion() and not attacker.removed:\u00a7            attacker.die(self)\u00a7            attacker.game.check_delayed()\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7"}
{"source": "Worgen Infiltrator NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Stealth</b>", "target": "class WorgenInfiltrator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Worgen Infiltrator\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, stealth=True)\u00a7"}
{"source": "Blackwing Corruptor NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry</b>: If you're holding a Dragon, deal 3 damage.", "target": "class BlackwingCorruptor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blackwing Corruptor\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(3), CharacterSelector(players=BothPlayer(), picker=UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7"}
{"source": "Drakonid Crusher NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> If your opponent has 15 or less Health, gain +3/+3.", "target": "class DrakonidCrusher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Drakonid Crusher\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Attribute('health', HeroSelector(EnemyPlayer())), value=15)))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7"}
{"source": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "target": "class Imp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Twilight Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> If you're holding a Dragon, gain +2 Health.", "target": "class TwilightWhelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Twilight Whelp\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Give(Buff(ChangeHealth(2))), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}