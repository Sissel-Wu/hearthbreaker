{"source": "Sorcerer NAME_END 5 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +2</b>", "target": "class Sorcerer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sorcerer\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, spell_damage=2)\u00a7"}
{"source": "Misty Lake Butterfly NAME_END 3 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class MistyLakeButterfly(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Misty Lake Butterfly\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True)\u00a7"}
{"source": "Necromancer NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 1 Health to all friendly characters.", "target": "class Necromancer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Necromancer\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         battlecry=Battlecry(Heal(1), CharacterSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 6)\u00a7"}
{"source": "Fire Hydrant NAME_END 4 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "target": "class FireHydrant(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fire Hydrant\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(4, 3)\u00a7"}
{"source": "Freshwater Bass NAME_END 1 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Gain +1/+1 for each other friendly minion on the battlefield.", "target": "class FreshwaterBass(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Freshwater Bass\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector()))),\u00a7                                                   Buff(ChangeHealth(Count(MinionSelector())))]),\u00a7                                             SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7 return Minion(1, 3)\u00a7"}
{"source": "Heaven Water NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage to ALL characters.", "target": "class HeavenWater(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Heaven Water\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        targets.append(game.other_player.hero)\u00a7        targets.append(game.current_player.hero)\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Sterilize NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain 1 Mana Crystals this turn only.", "target": "class Sterilize(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sterilize\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.mana < 9:\u00a7            player.mana += 1\u00a7        else:\u00a7            player.mana = 10\u00a7"}
{"source": "Fire Vampire NAME_END 2 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "target": "class FireVampire(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fire Vampire\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 6)\u00a7"}
{"source": "Faraday Cage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If that kills it, draw a card.", "target": "class FaradayCage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Faraday Cage\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON,\u00a7                         target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health <= player.effective_spell_damage(2) and not self.target.divine_shield:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7  player.draw()\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self\u00a7"}
{"source": "Trigonometric NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 1/1 Sheep.", "target": "class Trigonometric(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Trigonometric\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE,\u00a7                         target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.mage import Sheep\u00a7        sheep = Sheep()\u00a7        minion = sheep.create_minion(None)\u00a7        minion.card = sheep\u00a7        self.target.replace(minion)\u00a7"}
{"source": "Blazing Scarecrow NAME_END 2 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END NIL", "target": "class BlazingScarecrow(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blazing Scarecrow\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Black Sheepherder NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "target": "class BlackSheepherder(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Black Sheepherder\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True)\u00a7"}
{"source": "Shadow Warrior NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b>", "target": "class ShadowWarrior(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Warrior\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, charge=True)\u00a7"}
{"source": "Medieval Raven NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry:</b> Restore 3 Health.", "target": "class MedievalRaven(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Medieval Raven\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\u00a7                         battlecry=Battlecry(Heal(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3)\u00a7"}
{"source": "Meek In The Rain NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b>Spell Damage +2</b>", "target": "class MeekInTheRain(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Meek In The Rain\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, spell_damage=2)\u00a7"}
{"source": "Meteor Shower NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Gain 12 Mana Crystals. Discard your hand.", "target": "class MeteorShower(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Meteor Shower\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for card in player.hand:\u00a7            card.unattach()\u00a7            player.trigger(\"card_discarded\", card)\u00a7        player.hand = []\u00a7        player.max_mana = 12\u00a7        player.mana = 12\u00a7"}
{"source": "Onion Head NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Taunt</b> NL <b>Divine Shield</b>", "target": "class OnionHead(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Onion Head\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4, divine_shield=True, taunt=True)\u00a7"}
{"source": "Curly Teddy Dog NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +1 Attack.", "target": "class CurlyTeddyDog(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Curly Teddy Dog\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(1)),\u00a7                                                                                       SelfSelector()))])\u00a7"}
{"source": "Fairy Wand NAME_END 2 ATK_END -1 DEF_END 3 COST_END 4 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Has +1 Attack while you have a Mech.", "target": "class FairyWand(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fairy Wand\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 4, buffs=[Buff(ChangeAttack(1), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))),\u00a7                                                                     value=0))])\u00a7"}
{"source": "Singular Optics NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of each friendly minion into your hand.", "target": "class SingularOptics(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Singular Optics\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in sorted(copy.copy(player.minions), key=lambda minion: minion.born):\u00a7            if len(player.hand) < 10:\u00a7                player.hand.append(minion.card)\u00a7"}
{"source": "Flying Guard NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever your hero takes damage on your turn, gain +2/+1.", "target": "class FlyingGuard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flying Guard\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON,\u00a7                         minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(CharacterDamaged(And(IsHero(), OwnersTurn())),\u00a7                                            ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(1))]),\u00a7 SelfSelector()))])\u00a7"}
{"source": "Chicken Poultryizer NAME_END 2 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Draw a card. If it's a minion, transform it into a Chicken.", "target": "class ChickenPoultryizer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Chicken Poultryizer\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\u00a7                         battlecry=(Battlecry(Draw(), PlayerSelector()), Battlecry(Transform(GnomishChicken()),\u00a7                                                                                   LastDrawnSelector(),\u00a7   Matches(LastDrawnSelector(),\u00a7                                                                                           IsMinion()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Cherry Bomb NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Battlecry:</b> Shuffle a Mine into your opponent's deck. When drawn, it explodes for 10 damage.", "target": "class CherryBomb(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cherry Bomb\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY,\u00a7                         minion_type=MINION_TYPE.MECH,\u00a7                         battlecry=Battlecry(AddCard(BurrowingMine(), add_to_deck=True), PlayerSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 6)\u00a7"}
{"source": "Wandering Bird NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 4 damage randomly split between all other characters.", "target": "class WanderingBird(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wandering Bird\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\u00a7                         battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\u00a7                                                                          picker=RandomPicker(4))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Arcanist NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Stealth</b> NL <b>Spell Damage +2</b>", "target": "class Arcanist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcanist\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, stealth=True, spell_damage=2)\u00a7"}
{"source": "Golden Snitch NAME_END 1 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b>Deathrattle:</b> Summon a random 3-Cost minion.", "target": "class GoldenSnitch(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Golden Snitch\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, deathrattle=Deathrattle(Summon(CollectionSource([ManaCost(3), IsMinion()])),\u00a7                                                    PlayerSelector()))\u00a7"}
{"source": "Violet Polarizer NAME_END 2 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry</b>: Deal 1 damage to all minions with <b>Deathrattle</b>.", "target": "class VioletPolarizer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Violet Polarizer\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE,\u00a7                         battlecry=Battlecry(Damage(1), MinionSelector(MinionHasDeathrattle(), BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7"}
{"source": "Skyline Keeper NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Murloc RACE_END Epic RARITY_END Whenever another friendly Murloc dies, draw a card. <b>Overload</b>: (1)", "target": "class SkylineKeeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Skyline Keeper\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC,\u00a7                         minion_type=MINION_TYPE.MURLOC, overload=1)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionDied(IsType(MINION_TYPE.MURLOC)),\u00a7                                            ActionTag(Draw(), PlayerSelector()))])\u00a7"}
{"source": "Sleepwalking Physician NAME_END 4 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> If you have a Mech, gain +2/+2 and add a <b>Spare Part</b> to your hand.", "target": "class SleepwalkingPhysician(MinionCard):\u00a7    def __init__(self):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        super().__init__(\"Sleepwalking Physician\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         battlecry=(Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector(),\u00a7                                              GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0)),\u00a7                                    Battlecry(AddCard(CardList(spare_part_list)), PlayerSelector(),\u00a7                                              GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": "Sonata NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Swap Health with another minion.", "target": "class Sonata(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sonata\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY,\u00a7                         battlecry=Battlecry(SwapStats(\"health\", \"health\", True), MinionSelector(players=BothPlayer(),\u00a7                                                                                                 picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4)\u00a7"}
{"source": "Morning Call NAME_END 1 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Deal 2 damage to all minions.", "target": "class MorningCall(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Morning Call\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 2, deathrattle=Deathrattle(Damage(2), MinionSelector(players=BothPlayer())))\u00a7"}
{"source": "Melania NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Destroy any minion damaged by this minion.", "target": "class Melania(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Melania\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])\u00a7"}
{"source": "Scotland Cockroach NAME_END 3 ATK_END 6 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt. NL Deathrattle:</b> Summon a 1/2 Slime with <b>Taunt</b>.", "target": "class ScotlandCockroach(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Scotland Cockroach\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, taunt=True, deathrattle=Deathrattle(Summon(Slime()), PlayerSelector()))\u00a7"}
{"source": "Nullpointer NAME_END 5 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Deathrattle:</b> Put a random Demon from your hand into the battlefield.", "target": "class Nullpointer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nullpointer\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 2, deathrattle=Deathrattle(Summon(HandSource(FriendlyPlayer(), [IsType(MINION_TYPE.DEMON)])),\u00a7                                                    PlayerSelector()))\u00a7"}
{"source": "Lacertidae NAME_END 5 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Set a hero's remaining Health to 20.", "target": "class Lacertidae(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lacertidae\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON,\u00a7                         battlecry=Battlecry(SetHealth(20), HeroSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7)\u00a7"}
{"source": "Crystal Ball NAME_END 2 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Charge</b>. <b>Battlecry:</b> Give your opponent a Mana Crystal.", "target": "class CrystalBall(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crystal Ball\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\u00a7                         battlecry=Battlecry(GiveManaCrystal(), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, charge=True)\u00a7"}
{"source": "Bunny Woodland NAME_END 6 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "target": "class BunnyWoodland(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bunny Woodland\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 4)\u00a7"}
{"source": "Floppy Fur NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy your weapon and deal its damage to all enemies.", "target": "class FloppyFur(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Floppy Fur\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if player.weapon is not None\u00a7            attack_power = player.effective_spell_damage(player.hero.calculate_attack())\u00a7            player.weapon.destroy()\u00a7\u00a7            for minion in copy.copy(game.other_player.minions):\u00a7                minion.damage(attack_power, self)\u00a7\u00a7            game.other_player.hero.damage(attack_power, self)\u00a7"}
{"source": "Kenka NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions except one. <i>(chosen randomly)</i>", "target": "class Kenka(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kenka\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 2\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minions = copy.copy(player.minions)\u00a7        minions.extend(game.other_player.minions)\u00a7\u00a7        if len(minions) > 1:\u00a7   survivor = game.random_choice(minions)\u00a7            for minion in minions:\u00a7                if minion is not survivor:\u00a7                    minion.die(self)\u00a7"}
{"source": "Reveal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions <b>Stealth</b> until your next turn.", "target": "class Reveal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Reveal\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in player.minions:\u00a7            if not minion.stealth:\u00a7                minion.add_buff(BuffUntil(Stealth(), TurnStarted()))\u00a7"}
{"source": "Carbuncle NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class Carbuncle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Carbuncle\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 3)\u00a7"}
{"source": "Sheepfold NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b>Charge</b>. <b>Battlecry:</b> Discard one random card.", "target": "class Sheepfold(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sheepfold\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON,\u00a7                         battlecry=Battlecry(Discard(amount=1), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, charge=True)\u00a7"}
{"source": "Crustal Movement NAME_END 8 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Taunt</b>. <b>Overload:</b> (3)", "target": "class CrustalMovement(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crustal Movement\", 6, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=3)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, taunt=True)\u00a7"}
{"source": "Retaliate NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero is attacked, deal $3 damage to all enemies.", "target": "class Retaliate(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Retaliate\", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if isinstance(target, Hero):\u00a7            game = attacker.player.game\u00a7            enemies = copy.copy(game.current_player.minions)\u00a7            enemies.append(game.current_player.hero)\u00a7            for enemy in enemies:\u00a7                enemy.damage(3, None)\u00a7            game.check_delayed()\u00a7            super().reveal()\u00a7"}
{"source": "Rain of Chaos NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class RainOfChaos(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rain of Chaos\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Goblin NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "target": "class Goblin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goblin\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, taunt=True)\u00a7"}
{"source": "Star Light NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card and deal damage equal to its cost.", "target": "class StarLight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Star Light\", 6, CHARACTER_CLASS.PALADIN,\u00a7                         CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        fatigue = False\u00a7        if player.deck.left == 0:\u00a7            fatigue = True\u00a7\u00a7        player.draw()\u00a7        if not fatigue:\u00a7            cost = player.hand[-1].mana\u00a7            self.target.damage(player.effective_spell_damage(cost), self)\u00a7"}
{"source": "Goldfish NAME_END 4 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END NIL", "target": "class Goldfish(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goldfish\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False,\u00a7                         minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": "Infinito De Laufraut NAME_END 2 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> The next <b>Secret</b> you play this turn costs (0).", "target": "class InfinitoDeLaufraut(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Infinito De Laufraut\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE,\u00a7                         battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-100), CardSelector(condition=IsSecret()),\u00a7                                                                 CardPlayed(IsSecret()))]), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Dark Knight NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a character is healed, gain +1 Attack.", "target": "class DarkKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Knight\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(CharacterHealed(player=BothPlayer()),\u00a7                                            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7\u00a7"}
{"source": "Moonlight Demon NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END ALL minions cost (1) more.", "target": "class MoonlightDemon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Moonlight Demon\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, auras=[Aura(ManaChange(1), CardSelector(BothPlayer(), IsMinion()))])\u00a7\u00a7"}
{"source": "Manifestation NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When a character attacks your hero, instead he attacks another random character.", "target": "class Manifestation(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Manifestation\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, character, target):\u00a7        if isinstance(target, Hero) and not character.removed:\u00a7            game = character.player.game\u00a7            possibilities = copy.copy(game.current_player.minions)\u00a7            possibilities.extend(game.other_player.minions)\u00a7            possibilities.append(game.current_player.hero)\u00a7            possibilities.append(game.other_player.hero)\u00a7            possibilities.remove(character.current_target)\u00a7            character.current_target = game.random_choice(possibilities)\u00a7\u00a7            super().reveal()\u00a7"}
{"source": "Cubic Room NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When an enemy attacks, summon a 2/1 Defender as the new target.", "target": "class CubicRoom(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cubic Room\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        player = attacker.player.game.other_player\u00a7        if len(player.minions) < 7 and not attacker.removed:\u00a7            from hearthbreaker.cards.minions.paladin import DefenderMinion\u00a7            defender = DefenderMinion()\u00a7            defender.summon(player, player.game, len(player.minions))\u00a7            attacker.current_target = player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7"}
{"source": "Voice of The Land NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Give your minions +1/+1; or Summon a 3/2 Panther.", "target": "class VoiceOfTheLand(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voice Of The Land\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        option = player.agent.choose_option([LeaderOfThePack(), SummonPanther()], player)\u00a7        option.use(player, game)\u00a7"}
{"source": "Detention NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When one of your minions dies, return it to life with 2 Health.", "target": "class Detention(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Detention\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, minion, by):\u00a7        resurrection = minion.card.summon(minion.player, minion.game, min(minion.index, len(minion.player.minions)))\u00a7        if resurrection:\u00a7            resurrection.health = 2\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"minion_died\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"minion_died\", self._reveal)\u00a7"}
{"source": "Corner Creature NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Gain control of an enemy minion with 3 or less Attack until end of turn.", "target": "class CornerCreature(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Corner Creature\", 3, CHARACTER_CLASS.PRIEST,\u00a7                         CARD_RARITY.RARE,\u00a7                         target_func=hearthbreaker.targeting.find_enemy_minion_spell_target,\u00a7                         filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())\u00a7"}
{"source": "Lucratious Deal NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a minion. Restore #5 Health to your hero.", "target": "class LucratiousDeal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lucratious Deal\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE,\u00a7                         target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        player.hero.heal(player.effective_heal_power(5), self)\u00a7"}
{"source": "Troublemaker NAME_END 2 ATK_END 4 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END NIL", "target": "class Troublemaker(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Troublemaker\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, card, index):\u00a7        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():\u00a7            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))\u00a7            card.target = self.player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"card_played\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"card_played\", self._reveal)\u00a7        self.player = None\u00a7"}
{"source": "Action Peguintial NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (2) less, but not less than (1).", "target": "class ActionPeguintial(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Action Peguintial\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, auras=[Aura(ManaChange(-2, 1, minimum=1), CardSelector(condition=IsMinion()))])\u00a7"}
{"source": "Roaring Windmill NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Windfury</b>", "target": "class RoaringWindmill(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Roaring Windmill\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, windfury=True)\u00a7"}
{"source": "Sublimate! NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you have a weapon, give it +1/+3. Otherwise equip a 1/3 weapon.", "target": "class Sublimate(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sublimate!\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.weapons.warrior import HeavyAxe\u00a7        if player.weapon:\u00a7            player.weapon.durability += 1\u00a7            player.weapon.base_attack += 3\u00a7        else:\u00a7            heavy_axe = HeavyAxe().create_weapon(player)\u00a7            heavy_axe.equip(player)\u00a7"}
{"source": "Blow NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class Blow(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blow\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2)\u00a7"}
{"source": "Stray Dog NAME_END 3 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END NIL", "target": "class StrayDog(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stray Dog\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4)\u00a7"}
{"source": "Castellan NAME_END 2 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Whenever <b>you</b> target this minion with a spell, gain +1/+2.", "target": "class Castellan(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Castellan\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(SpellTargeted(), [ActionTag(Give([Buff(ChangeAttack(1)),\u00a7                                                                              Buff(ChangeHealth(2))]),\u00a7                                                                        SelfSelector())])])\u00a7"}
{"source": "Angry Bird NAME_END 6 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> Summon a random 3-Cost minion for your opponent.", "target": "class AngryBird(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Angry Bird\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON,\u00a7                         battlecry=(Battlecry(Summon(CollectionSource([ManaCost(3), IsMinion()])),\u00a7                                              PlayerSelector(EnemyPlayer()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 4)\u00a7"}
{"source": "Wuthering Hills NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 3 cards. Costs (1) less for each minion that died this turn.", "target": "class WutheringHills(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wuthering Hills\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON,\u00a7                         buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for n in range(0, 3):\u00a7            player.draw()\u00a7"}