{"source": "Acidic Swamp Ooze NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Destroy your opponent's weapon.", "target": "class AcidicSwampOoze(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Acidic Swamp Ooze\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Destroy(), WeaponSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Ancestral Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore a minion to full Health and give it <b>Taunt</b>.", "target": "class AncestralHealing(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancestral Healing\", 0, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.heal(player.effective_heal_power(self.target.calculate_max_health()), self)\u00a7        self.target.taunt = True\u00a7"}
{"source": "Animal Companion NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon a random Beast Companion.", "target": "class AnimalCompanion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Animal Companion\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        beast_list = [hearthbreaker.cards.minions.hunter.Huffer(), hearthbreaker.cards.minions.hunter.Misha(), hearthbreaker.cards.minions.hunter.Leokk()]\u00a7        card = game.random_choice(beast_list)\u00a7        card.summon(player, player.game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7"}
{"source": "Arcane Explosion NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to all enemy minions.", "target": "class ArcaneExplosion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Explosion\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7"}
{"source": "Arcane Intellect NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Draw 2 cards.", "target": "class ArcaneIntellect(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Intellect\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for c in range(0, 2):\u00a7            player.draw()\u00a7"}
{"source": "Arcane Missiles NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage randomly split among all enemies.", "target": "class ArcaneMissiles(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Missiles\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, player.effective_spell_damage(3)):\u00a7            targets = copy.copy(game.other_player.minions)\u00a7            targets.append(game.other_player.hero)\u00a7            target = game.random_choice(targets)\u00a7            target.damage(1, self)\u00a7"}
{"source": "Arcane Shot NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "target": "class ArcaneShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Shot\", 1, CHARACTER_CLASS.HUNTER, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Arcanite Reaper NAME_END 5 ATK_END -1 DEF_END 5 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class ArcaniteReaper(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcanite Reaper\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(5, 2)\u00a7"}
{"source": "Assassinate NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy an enemy minion.", "target": "class Assassinate(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Assassinate\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7"}
{"source": "Backstab NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage to an undamaged minion.", "target": "class Backstab(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Backstab\", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.health == target.calculate_max_health() and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Blessing of Kings NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +4/+4. <i>(+4 Attack/+4 Health)</i>", "target": "class BlessingOfKings(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessing of Kings\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(4)\u00a7        self.target.increase_health(4)\u00a7"}
{"source": "Blessing of Might NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion +3 Attack.", "target": "class BlessingOfMight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessing of Might\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(3)\u00a7"}
{"source": "Bloodfen Raptor NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "target": "class BloodfenRaptor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodfen Raptor\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Bloodlust NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions +3 Attack this turn.", "target": "class Bloodlust(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodlust\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in player.minions:\u00a7            minion.change_temp_attack(3)\u00a7"}
{"source": "Bluegill Warrior NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b>Charge</b>", "target": "class BluegillWarrior(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bluegill Warrior\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, charge=True)\u00a7"}
{"source": "Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class Boar(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boar\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Charge NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly minion +2 Attack and <b>Charge</b>.", "target": "class Charge(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Charge\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.change_attack(2)\u00a7        self.target.add_buff(Buff(_Charge()))\u00a7"}
{"source": "Chillwind Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class ChillwindYeti(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Chillwind Yeti\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7"}
{"source": "Claw NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Give your hero +2 Attack this turn and 2 Armor.", "target": "class Claw(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Claw\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.change_temp_attack(2)\u00a7        player.hero.increase_armor(2)\u00a7"}
{"source": "Cleave NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to two random enemy minions.", "target": "class Cleave(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cleave\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minions = copy.copy(game.other_player.minions)\u00a7\u00a7        for i in range(0, 2):\u00a7            minion = game.random_choice(minions)\u00a7            minions.remove(minion)\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 2\u00a7"}
{"source": "Consecration NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies.", "target": "class Consecration(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Consecration\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7        game.other_player.hero.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Core Hound NAME_END 9 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class CoreHound(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Core Hound\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 5)\u00a7"}
{"source": "Corruption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose an enemy minion. At the start of your turn, destroy it.", "target": "class Corruption(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Corruption\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_effect(Effect(TurnStarted(player=EnemyPlayer()), ActionTag(Kill(), SelfSelector())))\u00a7"}
{"source": "Dalaran Mage NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "target": "class DalaranMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dalaran Mage\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, spell_damage=1)\u00a7"}
{"source": "Divine Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Double a minion's Health.", "target": "class DivineSpirit(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Divine Spirit\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.increase_health(self.target.health)\u00a7"}
{"source": "Dragonling Mechanic NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Summon a 2/1 Mechanical Dragonling.", "target": "class DragonlingMechanic(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragonling Mechanic\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(MechanicalDragonling()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7"}
{"source": "Drain Life NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage. Restore #2 Health to your hero.", "target": "class DrainLife(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Drain Life\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(2), self)\u00a7        player.hero.heal(player.effective_heal_power(2), self)\u00a7"}
{"source": "Dread Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Battlecry:</b> Deal 1 damage to ALL other characters.", "target": "class DreadInfernal(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dread Infernal\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7"}
{"source": "Elven Archer NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 1 damage.", "target": "class ElvenArcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Elven Archer\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Excess Mana NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END Draw a card. <i>(You can only have 10 Mana in your tray.)</i>", "target": "class ExcessMana(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Excess Mana\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.draw()\u00a7"}
{"source": "Execute NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a damaged enemy minion.", "target": "class Execute(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Execute\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target, filter_func=lambda target: target.health != target.calculate_max_health() and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7"}
{"source": "Fan of Knives NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to all enemy minions. Draw a card.", "target": "class FanOfKnives(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fan of Knives\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7\u00a7        player.draw()\u00a7"}
{"source": "Fireball NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $6 damage.", "target": "class Fireball(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fireball\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(6), self)\u00a7"}
{"source": "Flamestrike NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to all enemy minions.", "target": "class Flamestrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flamestrike\", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(4), self)\u00a7"}
{"source": "Flametongue Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Common RARITY_END Adjacent minions have +2 Attack.", "target": "class FlametongueTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flametongue Totem\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 3, auras=[Aura(ChangeAttack(2), MinionSelector(Adjacent()))])\u00a7"}
{"source": "Frog NAME_END 0 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "target": "class Frog(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frog\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(0, 1, taunt=True)\u00a7"}
{"source": "Frost Nova NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> all enemy minions.", "target": "class FrostNova(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frost Nova\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in game.other_player.minions:\u00a7            minion.add_buff(Buff(Frozen()))\u00a7"}
{"source": "Frost Shock NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $1 damage to an enemy character and <b>Freeze</b> it.", "target": "class FrostShock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frost Shock\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7"}
{"source": "Frostbolt NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a character and <b>Freeze</b> it.", "target": "class Frostbolt(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frostbolt\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7        self.target.add_buff(Buff(Frozen()))\u00a7"}
{"source": "Frostwolf Grunt NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class FrostwolfGrunt(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frostwolf Grunt\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, taunt=True)\u00a7"}
{"source": "Goldshire Footman NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class GoldshireFootman(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goldshire Footman\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, taunt=True)\u00a7"}
{"source": "Grimscale Oracle NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END ALL other Murlocs have +1 Attack.", "target": "class GrimscaleOracle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Grimscale Oracle\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])\u00a7"}
{"source": "Guardian of Kings NAME_END 5 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 6 Health to your hero.", "target": "class GuardianOfKings(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Guardian of Kings\", 7, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(6), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 6)\u00a7"}
{"source": "Gurubashi Berserker NAME_END 2 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, gain +3 Attack.", "target": "class GurubashiBerserker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gurubashi Berserker\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 7, effects=[\u00a7            Effect(CharacterDamaged(condition=MinionIsTarget()), ActionTag(Give(ChangeAttack(3)), SelfSelector()))])\u00a7"}
{"source": "Hammer of Wrath NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage. NL Draw a card.", "target": "class HammerOfWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hammer of Wrath\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7        player.draw()\u00a7"}
{"source": "Hand of Protection NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b>Divine Shield</b>.", "target": "class HandOfProtection(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hand of Protection\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.divine_shield = True\u00a7"}
{"source": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "target": "class HealingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Healing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1), MinionSelector(condition=None)))])\u00a7"}
{"source": "Healing Touch NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #8 Health.", "target": "class HealingTouch(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Healing Touch\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.heal(player.effective_heal_power(8), self)\u00a7"}
{"source": "Hex NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 0/1 Frog with <b>Taunt</b>.", "target": "class Hex(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hex\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        frog = hearthbreaker.cards.minions.neutral.Frog()\u00a7        minion = frog.create_minion(None)\u00a7        minion.card = frog\u00a7        self.target.replace(minion)\u00a7"}
{"source": "Holy Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END Restore #6 Health.", "target": "class HolyLight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Light\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.heal(player.effective_heal_power(6), self)\u00a7"}
{"source": "Holy Nova NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to all enemies. Restore #2 Health to all friendly characters.", "target": "class HolyNova(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Nova\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7\u00a7        for minion in player.minions:\u00a7            minion.heal(player.effective_heal_power(2), self)\u00a7"}
{"source": "Holy Smite NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $2 damage.", "target": "class HolySmite(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Smite\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Houndmaster NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry:</b> Give a friendly Beast +2/+2 and <b>Taunt</b>.", "target": "class Houndmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Houndmaster\", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2)), Buff(Taunt())]), MinionSelector(IsType(MINION_TYPE.BEAST), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": "Huffer NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Charge</b>", "target": "class Huffer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Huffer\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, charge=True)\u00a7"}
{"source": "Humility NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to 1.", "target": "class Humility(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Humility\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.change_attack(1 - self.target.calculate_attack())\u00a7"}
{"source": "Hunter's Mark NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Health to 1.", "target": "class HuntersMark(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hunter's Mark\", 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.set_health_to(1)\u00a7"}
{"source": "Ironforge Rifleman NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 1 damage.", "target": "class IronforgeRifleman(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironforge Rifleman\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.NONE, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Ironfur Grizzly NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "target": "class IronfurGrizzly(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironfur Grizzly\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, taunt=True)\u00a7"}
{"source": "Kill Command NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. If you have a Beast, deal $5 damage instead.", "target": "class KillCommand(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kill Command\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        beasts = hearthbreaker.targeting.find_friendly_minion_battlecry_target(\u00a7            player.game, lambda x: x.card.minion_type is MINION_TYPE.BEAST)\u00a7        if beasts is None:\u00a7            self.target.damage(player.effective_spell_damage(3), self)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(5), self)\u00a7"}
{"source": "Kobold Geomancer NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "target": "class KoboldGeomancer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kobold Geomancer\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, spell_damage=1)\u00a7"}
{"source": "Kor'kron Elite NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b>", "target": "class KorkronElite(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kor'kron Elite\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3, charge=True)\u00a7"}
{"source": "Leokk NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your other minions have +1 Attack.", "target": "class Leokk(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Leokk\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, auras=[Aura(ChangeAttack(1), MinionSelector())])\u00a7"}
{"source": "Light's Justice NAME_END 1 ATK_END -1 DEF_END 1 COST_END 4 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "target": "class LightsJustice(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Light's Justice\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 4)\u00a7"}
{"source": "Lord of the Arena NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class LordOfTheArena(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lord of the Arena\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5, taunt=True)\u00a7"}
{"source": "Mechanical Dragonling NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "target": "class MechanicalDragonling(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mechanical Dragonling\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": "Mind Blast NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $5 damage to the enemy hero.", "target": "class MindBlast(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mind Blast\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        game.other_player.hero.damage(player.effective_spell_damage(5), self)\u00a7"}
{"source": "Mind Control NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Take control of an enemy minion.", "target": "class MindControl(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mind Control\", 10, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        new_minion = self.target.copy(player)\u00a7        self.target.remove_from_board()\u00a7        new_minion.add_to_board(len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7"}
{"source": "Mind Vision NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Put a copy of a random card in your opponent's hand into your hand.", "target": "class MindVision(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mind Vision\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if (len(game.other_player.hand) > 0):\u00a7            card = copy.deepcopy(game.random_choice(game.other_player.hand))\u00a7            player.hand.append(card)\u00a7            card.player = player\u00a7"}
{"source": "Mirror Image NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class MirrorImage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mirror Image\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, 2):\u00a7            MirrorImageMinion().summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7"}
{"source": "Mirror Image NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Summon two 0/2 minions with <b>Taunt</b>.", "target": "class MirrorImage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mirror Image\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, 2):\u00a7            MirrorImageMinion().summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7"}
{"source": "Misha NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "target": "class Misha(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Misha\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, taunt=True)\u00a7"}
{"source": "Moonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage.", "target": "class Moonfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Moonfire\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7"}
{"source": "Murloc Raider NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Free RARITY_END NIL", "target": "class MurlocRaider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Raider\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": "Murloc Scout NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "target": "class MurlocScout(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Scout\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Murloc Tidehunter NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END <b>Battlecry:</b> Summon a 1/1 Murloc Scout.", "target": "class MurlocTidehunter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Tidehunter\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Summon(MurlocScout()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": "Nightblade NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry: </b>Deal 3 damage to the enemy hero.", "target": "class Nightblade(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nightblade\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Damage(3), HeroSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Northshire Cleric NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever a minion is healed, draw a card.", "target": "class NorthshireCleric(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Northshire Cleric\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(CharacterHealed(condition=IsMinion(), player=BothPlayer()), ActionTag(Draw(), PlayerSelector()))])\u00a7"}
{"source": "Novice Engineer NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry:</b> Draw a card.", "target": "class NoviceEngineer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Novice Engineer\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, battlecry=Battlecry(Draw(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Oasis Snapjaw NAME_END 2 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "target": "class OasisSnapjaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Oasis Snapjaw\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 7)\u00a7"}
{"source": "Ogre Magi NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "target": "class OgreMagi(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ogre Magi\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, spell_damage=1)\u00a7"}
{"source": "Raid Leader NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END Your other minions have +1 Attack.", "target": "class RaidLeader(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Raid Leader\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector())])\u00a7"}
{"source": "Razorfen Hunter NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Summon a 1/1 Boar.", "target": "class RazorfenHunter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Razorfen Hunter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Boar()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Reckless Rocketeer NAME_END 5 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Charge</b>", "target": "class RecklessRocketeer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Reckless Rocketeer\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 2, charge=True)\u00a7"}
{"source": "River Crocolisk NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END NIL", "target": "class RiverCrocolisk(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"River Crocolisk\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Rockbiter Weapon NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a friendly character +3 Attack this turn.", "target": "class RockbiterWeapon(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rockbiter Weapon\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_friendly_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_temp_attack(3)\u00a7"}
{"source": "Sacrificial Pact NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a Demon. Restore #5 Health to your hero.", "target": "class SacrificialPact(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sacrificial Pact\", 0, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, filter_func=lambda character: character.card.minion_type == MINION_TYPE.DEMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        player.hero.heal(player.effective_heal_power(5), self)\u00a7"}
{"source": "Sap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END Return an enemy minion to your opponent's hand.", "target": "class Sap(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sap\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.bounce()\u00a7"}
{"source": "Savage Roar NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your characters +2 Attack this turn.", "target": "class SavageRoar(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Savage Roar\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in player.minions:\u00a7            minion.change_temp_attack(2)\u00a7        player.hero.change_temp_attack(2)\u00a7"}
{"source": "Shadow Bolt NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $4 damage to a minion.", "target": "class ShadowBolt(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Bolt\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(4), self)\u00a7"}
{"source": "Shadow Word: Death NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion with an Attack of 5 or more.", "target": "class ShadowWordDeath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Word: Death\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.calculate_attack() >= 5 and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7"}
{"source": "Shadow Word: Pain NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Free RARITY_END Destroy a minion with 3 or less Attack.", "target": "class ShadowWordPain(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Word: Pain\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7"}
{"source": "Shattered Sun Cleric NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a friendly minion +1/+1.", "target": "class ShatteredSunCleric(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shattered Sun Cleric\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Sheep NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class Sheep(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sheep\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Shield Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Gain 5 Armor. NL Draw a card.", "target": "class ShieldBlock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shield Block\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.increase_armor(5)\u00a7        player.draw()\u00a7"}
{"source": "Shiv NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage. Draw a card.", "target": "class Shiv(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shiv\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(1), self)\u00a7        player.draw()\u00a7"}
{"source": "Silver Hand Recruit NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "target": "class SilverHandRecruit(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silver Hand Recruit\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.FREE, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Soulfire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Discard a random card.", "target": "class Soulfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Soulfire\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(4), self)\u00a7        player.discard()\u00a7"}
{"source": "Sprint NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 4 cards.", "target": "class Sprint(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sprint\", 7, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for i in range(0, 4):\u00a7            player.draw()\u00a7"}
{"source": "Starfire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $5 damage. NL Draw a card.", "target": "class Starfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Starfire\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(5), self)\u00a7        player.draw()\u00a7"}
{"source": "Starving Buzzard NAME_END 3 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever you summon a Beast, draw a card.", "target": "class StarvingBuzzard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Starving Buzzard\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, effects=[Effect(MinionPlaced(IsType(MINION_TYPE.BEAST)), ActionTag(Draw(), PlayerSelector()))])\u00a7"}
{"source": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b>Taunt</b>", "target": "class StoneclawTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stoneclaw Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, taunt=True)\u00a7"}
{"source": "Stonetusk Boar NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Free RARITY_END <b>Charge</b>", "target": "class StonetuskBoar(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stonetusk Boar\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, charge=True)\u00a7"}
{"source": "Stormpike Commando NAME_END 4 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 2 damage.", "target": "class StormpikeCommando(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormpike Commando\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2)\u00a7"}
{"source": "Stormwind Champion NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your other minions have +1/+1.", "target": "class StormwindChampion(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormwind Champion\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6, auras=[Aura(ChangeAttack(1), MinionSelector()), Aura(ChangeHealth(1), MinionSelector())])\u00a7"}
{"source": "Swipe NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to an enemy and $1 damage to all other enemies.", "target": "class Swipe(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Swipe\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(4, self)\u00a7\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            if minion is not self.target:\u00a7                minion.damage(player.effective_spell_damage(1), self)\u00a7\u00a7        if self.target is not game.other_player.hero:\u00a7            game.other_player.hero.damage(player.effective_spell_damage(1), self)\u00a7"}
{"source": "Timber Wolf NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Free RARITY_END Your other Beasts have +1 Attack.", "target": "class TimberWolf(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Timber Wolf\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.BEAST)))])\u00a7"}
{"source": "Totemic Might NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your Totems +2 Health.", "target": "class TotemicMight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Totemic Might\", 0, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in player.minions:\u00a7            if minion.card.minion_type == MINION_TYPE.TOTEM:\u00a7                minion.increase_health(2)\u00a7"}
{"source": "Tracking NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Free RARITY_END Look at the top three cards of your deck. Draw one and discard the others.", "target": "class Tracking(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tracking\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        cards = []\u00a7        for card_index in range(0, 3):\u00a7            if player.can_draw():\u00a7                cards.append(player.deck.draw(game))\u00a7        if len(cards) > 0:\u00a7            chosen_card = player.agent.choose_option(cards, player)\u00a7            player.hand.append(chosen_card)\u00a7            player.hand[-1].player = player\u00a7            player.trigger(\"card_drawn\", chosen_card)\u00a7"}
{"source": "Truesilver Champion NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your hero attacks, restore 2 Health to it.", "target": "class TruesilverChampion(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Truesilver Champion\", 4, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(4, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(Heal(2), HeroSelector()))])\u00a7"}
{"source": "Tundra Rhino NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Your Beasts have <b>Charge</b>.", "target": "class TundraRhino(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tundra Rhino\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, charge=True, auras=[Aura(Charge(), MinionSelector(IsType(MINION_TYPE.BEAST)))])\u00a7"}
{"source": "Vanish NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return all minions to their owner's hand.", "target": "class Vanish(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vanish\", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(player.minions)\u00a7\u00a7        for minion in sorted(targets, key=lambda m: m.born):\u00a7            minion.bounce()\u00a7"}
{"source": "Voidwalker NAME_END 1 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Free RARITY_END <b>Taunt</b>", "target": "class Voidwalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voidwalker\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, taunt=True)\u00a7"}
{"source": "Warsong Commander NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END Whenever you summon a minion with 3 or less Attack, give it <b>Charge</b>.", "target": "class WarsongCommander(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Warsong Commander\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionPlaced(AttackLessThanOrEqualTo(3)), ActionTag(Give(Charge()), TargetSelector()))])\u00a7"}
{"source": "Water Elemental NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> any character damaged by this minion.", "target": "class WaterElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Water Elemental\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, effects=[Effect(DidDamage(), ActionTag(Give(Frozen()), TargetSelector()))])\u00a7"}
{"source": "Whirlwind NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to ALL minions.", "target": "class Whirlwind(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whirlwind\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(1), self)\u00a7"}
{"source": "Wicked Knife NAME_END 1 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "target": "class WickedKnife(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wicked Knife\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.FREE, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 2)\u00a7"}
{"source": "Wild Growth NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain an empty Mana Crystal.", "target": "class WildGrowth(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wild Growth\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.max_mana < 10:\u00a7            player.max_mana += 1\u00a7        else:\u00a7            player.hand.append(ExcessMana())\u00a7            player.hand[-1].player = player\u00a7"}
{"source": "Windfury NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Free RARITY_END Give a minion <b>Windfury</b>.", "target": "class Windfury(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Windfury\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.add_buff(Buff(_Windfury()))\u00a7"}
{"source": "Windspeaker NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a friendly minion <b>Windfury</b>.", "target": "class Windspeaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Windspeaker\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, battlecry=Battlecry(Give(Windfury()), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Wolfrider NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Charge</b>", "target": "class Wolfrider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wolfrider\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 1, charge=True)\u00a7"}
{"source": "Alexstrasza's Champion NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> If you're holding a Dragon, gain +1 Attack and <b>Charge</b>.", "target": "class AlexstraszasChampion(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Alexstrasza's Champion\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(Charge())]), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Ancestral Knowledge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. <b>Overload: (2)</b>", "target": "class AncestralKnowledge(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancestral Knowledge\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for c in range(0, 2):\u00a7            player.draw()\u00a7"}
{"source": "Anub'arak NAME_END 8 ATK_END 4 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> Return this to your hand and summon a 4/4 Nerubian.", "target": "class Anubarak(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anub'arak\", 9, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 4, deathrattle=[Deathrattle(Bounce(), SelfSelector()), Deathrattle(Summon(Nerubian()), PlayerSelector())])\u00a7"}
{"source": "Arcane Blast NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a minion. This spell gets double bonus from <b>Spell Damage</b>.", "target": "class ArcaneBlast(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Blast\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(2 + player.spell_damage), self)\u00a7"}
{"source": "Argent Horserider NAME_END 2 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b> NL <b>Divine Shield</b>", "target": "class ArgentHorserider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Horserider\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, charge=True, divine_shield=True)\u00a7"}
{"source": "Argent Lance NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Reveal a minion in each deck. If yours costs more, +1 Durability.", "target": "class ArgentLance(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Lance\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Joust(IncreaseDurability()), SelfSelector()))\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 2)\u00a7"}
{"source": "Argent Watchman NAME_END 2 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack. NL <b>Inspire:</b> Can attack as normal this turn.", "target": "class ArgentWatchman(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Watchman\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, buffs=[Buff(CantAttack())], effects=[Effect(UsedPower(), ActionTag(Give(BuffUntil(CanAttack(), TurnEnded())), SelfSelector()))])\u00a7"}
{"source": "Armored Warhorse NAME_END 5 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Battlecry:</b> Reveal a minion in each deck. If yours costs more, gain <b>Charge</b>.", "target": "class ArmoredWarhorse(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Armored Warhorse\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Joust(Give(Buff(Charge()))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 3)\u00a7"}
{"source": "Healing Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END At the end of your turn, restore 1 Health to all friendly minions.", "target": "class HealingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Healing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, effects=[Effect(TurnEnded(), ActionTag(Heal(1), MinionSelector(condition=None)))])\u00a7"}
{"source": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class Nerubian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Searing Totem NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class SearingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Searing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Stoneclaw Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "target": "class StoneclawTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stoneclaw Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, taunt=True)\u00a7"}
{"source": "Tournament Medic NAME_END 1 ATK_END 8 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Inspire:</b> Restore 2 Health to your hero.", "target": "class TournamentMedic(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tournament Medic\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 8, effects=[Effect(UsedPower(), ActionTag(Heal(2), HeroSelector()))])\u00a7"}
{"source": "Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Spell Damage +1</b>", "target": "class WrathOfAirTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wrath of Air Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, spell_damage=1)\u00a7"}
{"source": "Ancestor's Call NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a random minion from each player's hand into the battlefield.", "target": "class AncestorsCall(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancestor's Call\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and (len(player.minions) < 7 or len(player.opponent.minions) < 7)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for player in game.players:\u00a7            minions = [card for card in player.hand if card.is_minion()]\u00a7            if len(minions) and len(player.minions) < 7:\u00a7                minion_card = game.random_choice(minions)\u00a7                minion_card.unattach()\u00a7                player.hand.remove(minion_card)\u00a7                minion_card.summon(player, game, len(player.minions))\u00a7"}
{"source": "Anima Golem NAME_END 9 ATK_END 9 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Epic RARITY_END At the end of each turn, destroy this minion if it's your only one.", "target": "class AnimaGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anima Golem\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 9, effects=[Effect(TurnEnded(MinionCountIs(1), BothPlayer()), ActionTag(Kill(), SelfSelector()))])\u00a7"}
{"source": "Antique Healbot NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Battlecry:</b> Restore 8 Health to your hero.", "target": "class AntiqueHealbot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Antique Healbot\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Heal(8), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Arcane Nullifier X-21 NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Taunt</b> NL Can't be targeted by spells or Hero Powers.", "target": "class ArcaneNullifierX21(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Nullifier X-21\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, taunt=True, spell_targetable=False)\u00a7"}
{"source": "Armor Plating NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Health.", "target": "class ArmorPlating(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Armor Plating\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.increase_health(1)\u00a7"}
{"source": "Blingtron 3000 NAME_END 3 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Battlecry:</b> Equip a random weapon for each player.", "target": "class Blingtron3000(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blingtron 3000\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Equip(CollectionSource([IsWeapon()])), PlayerSelector(players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4)\u00a7"}
{"source": "Bolvar Fordragon NAME_END 1 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a friendly minion dies while this is in your hand, gain +1 Attack.", "target": "class BolvarFordragon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bolvar Fordragon\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY, effects=[Effect(MinionDied(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 7)\u00a7"}
{"source": "Bomb Lobber NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 4 damage to a random enemy minion.", "target": "class BombLobber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bomb Lobber\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Damage(4), MinionSelector(None, EnemyPlayer(), RandomPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Boom Bot NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END NIL RARITY_END <b>Deathrattle</b>: Deal 1-4 damage to a random enemy.", "target": "class BoomBot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Boom Bot\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, deathrattle=Deathrattle(Damage(RandomAmount(1, 4)), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))\u00a7"}
{"source": "Bouncing Blade NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $1 damage to a random minion. Repeat until a minion dies.", "target": "class BouncingBlade(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bouncing Blade\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 1\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = player.minions[:] + player.opponent.minions[:]\u00a7        if len(targets):\u00a7            for bounces in range(80):\u00a7                target = game.random_choice(targets)\u00a7                target.damage(player.effective_spell_damage(1), self)\u00a7                if target.dead:\u00a7                    break\u00a7"}
{"source": "Call Pet NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card. NL If it's a Beast, it costs (4) less.", "target": "class CallPet(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Call Pet\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        def reduce_cost(card):\u00a7            if card.is_minion() and card.minion_type == MINION_TYPE.BEAST:\u00a7                card.add_buff(Buff(ManaChange(-4)))\u00a7\u00a7        super().use(player, game)\u00a7        player.bind_once(\"card_drawn\", reduce_cost)\u00a7        player.draw()\u00a7"}
{"source": "Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "target": "class Chicken(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Chicken\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Clockwork Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Costs (1) less for each card in your opponent's hand.", "target": "class ClockworkGiant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Clockwork Giant\", 12, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH, buffs=[Buff(ManaChange(Count(CardSelector(EnemyPlayer())), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7"}
{"source": "Clockwork Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Add a <b>Spare Part</b> card to your hand.", "target": "class ClockworkGnome(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Clockwork Gnome\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        return Minion(2, 1, deathrattle=Deathrattle(AddCard(CardList(spare_part_list)), PlayerSelector()))\u00a7"}
{"source": "Cobalt Guardian NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you summon a Mech, gain <b>Divine Shield</b>.", "target": "class CobaltGuardian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cobalt Guardian\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 3, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.MECH)), ActionTag(Give(DivineShield()), SelfSelector()))])\u00a7"}
{"source": "Cobra Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage to a minion and the enemy hero.", "target": "class CobraShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cobra Shot\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7        game.other_player.hero.damage(player.effective_spell_damage(3), self)\u00a7"}
{"source": "Coghammer NAME_END 2 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Give a random friendly minion <b>Divine Shield</b> and <b>Taunt</b>.", "target": "class Coghammer(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Coghammer\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(DivineShield()), Buff(Taunt())]), MinionSelector(picker=RandomPicker())))\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 3)\u00a7"}
{"source": "Cogmaster NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Has +2 Attack while you have a Mech.", "target": "class Cogmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cogmaster\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, auras=[Aura(ChangeAttack(2), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))])\u00a7"}
{"source": "Crush NAME_END -1 ATK_END -1 DEF_END 7 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a minion. If you have a damaged minion, this costs (4) less.", "target": "class Crush(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crush\", 7, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target, buffs=[Buff(ManaChange(-4), GreaterThan(Count(MinionSelector(IsDamaged())), value=0))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.die(self)\u00a7"}
{"source": "Dark Wispers NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Choose One -</b> Summon 5 Wisps; or Give a minion +5/+5 and <b>Taunt</b>.", "target": "class DarkWispers(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Wispers\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return (super().can_use(player, game) and (len(player.minions) < 7 or hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable()) is not None))\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        class Buff5(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Give a minion +5/+5 and Taunt\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def can_use(self, player, game):\u00a7                return hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable()) is not None\u00a7\u00a7            def use(self, player, game):\u00a7                targets = hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable())\u00a7                target = player.agent.choose_target(targets)\u00a7                target.change_attack(5)\u00a7                target.increase_health(5)\u00a7                target.taunt = True\u00a7\u00a7        class Wisps5(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Summon 5 Wisps\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False)\u00a7\u00a7            def can_use(self, player, game):\u00a7                return len(player.minions) < 7\u00a7\u00a7            def use(self, player, game):\u00a7                from hearthbreaker.cards.minions.neutral import Wisp\u00a7                for i in range(0, 5):\u00a7                    wisp = Wisp()\u00a7                    wisp.summon(player, game, len(player.minions))\u00a7\u00a7        if len(hearthbreaker.targeting.find_minion_spell_target(game, lambda t: t.spell_targetable())) == 0:\u00a7            option = Wisps5()\u00a7        else:\u00a7            option = player.agent.choose_option([Wisps5(), Buff5()], player)\u00a7        option.use(player, game)\u00a7"}
{"source": "Darkbomb NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage.", "target": "class Darkbomb(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Darkbomb\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7"}
{"source": "Demonheart NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $5 damage to a minion. If it's a friendly Demon, give it +5/+5 instead.", "target": "class Demonheart(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demonheart\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(player.game.current_player.minions)\u00a7        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:\u00a7            self.target.change_attack(5)\u00a7            self.target.increase_health(5)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(5), self)\u00a7"}
{"source": "Dr. Boom NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry</b>: Summon two 1/1 Boom Bots. <i>WARNING: Bots may explode.</i>", "target": "class DoctorBoom(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dr. Boom\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(BoomBot(), 2), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7"}
{"source": "Druid of the Fang NAME_END 7 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END NIL RARITY_END NIL", "target": "class DruidOfTheFang(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Fang\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, battlecry=Battlecry(Transform(CobraForm()), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Druid of the Fang NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> If you have a Beast, transform this minion into a 7/7.", "target": "class DruidOfTheFang(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Fang\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, battlecry=Battlecry(Transform(CobraForm()), SelfSelector(), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.BEAST))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Dunemaul Shaman NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Windfury, Overload: (1)</b> NL 50% chance to attack the wrong enemy.", "target": "class DunemaulShaman(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dunemaul Shaman\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=1)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4, windfury=True, effects=[Effect(Attack(), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7"}
{"source": "Enhance-o Mechano NAME_END 3 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b>Battlecry:</b> Give your other minions <b>Windfury</b>, <b>Taunt</b>, or <b>Divine Shield</b>. NL <i>(at random)</i>", "target": "class EnhanceoMechano(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Enhance-o Mechano\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give([ Buff(Windfury()), Buff(Taunt()), Buff(DivineShield())], RandomPicker()), MinionSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Explosive Sheep NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Deal 2 damage to all minions.", "target": "class ExplosiveSheep(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Explosive Sheep\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, deathrattle=Deathrattle(Damage(2), CharacterSelector(players=BothPlayer())), taunt=True)\u00a7"}
{"source": "Feign Death NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Trigger all <b>Deathrattles</b> on your minions.", "target": "class FeignDeath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Feign Death\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in sorted(player.minions, key=lambda m: m.born):\u00a7            for deathrattle in minion.deathrattle:\u00a7                deathrattle.do(minion)\u00a7            if player.double_deathrattle:\u00a7                for deathrattle in minion.deathrattle:\u00a7                    deathrattle.do(minion)\u00a7"}
{"source": "Fel Cannon NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of your turn, deal 2 damage to a non-Mech minion.", "target": "class FelCannon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fel Cannon\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2), MinionSelector(Not(IsType(MINION_TYPE.MECH, True)), BothPlayer(), RandomPicker())))])\u00a7"}
{"source": "Fel Reaver NAME_END 8 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever your opponent plays a card, remove the top 3 cards of your deck.", "target": "class FelReaver(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fel Reaver\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, effects=[Effect(CardPlayed(player=EnemyPlayer()), ActionTag([Discard(3, query=DeckSource())], PlayerSelector()))])\u00a7"}
{"source": "Finicky Cloakfield NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a friendly minion <b>Stealth</b> until your next turn.", "target": "class FinickyCloakfield(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Finicky Cloakfield\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(BuffUntil(Stealth(), TurnStarted()))\u00a7"}
{"source": "Flame Leviathan NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Legendary RARITY_END When you draw this, deal 2 damage to all characters.", "target": "class FlameLeviathan(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flame Leviathan\", 7, CHARACTER_CLASS.MAGE, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH, effects=[Effect(Drawn(), ActionTag(Damage(2), CharacterSelector(None, BothPlayer())))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7"}
{"source": "Flamecannon NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage to a random enemy minion.", "target": "class Flamecannon(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flamecannon\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)\u00a7        target = game.random_choice(targets)\u00a7        target.damage(player.effective_spell_damage(4), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 1\u00a7"}
{"source": "Foe Reaper 4000 NAME_END 6 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Also damages the minions next to whomever he attacks.", "target": "class FoeReaper4000(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Foe Reaper 4000\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 9, effects=[Effect(Attack(IsMinion()), ActionTag(Damage(Attribute(\"attack\", SelfSelector())), MinionSelector(TargetAdjacent(), EnemyPlayer())))])\u00a7"}
{"source": "Force-Tank MAX NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Divine Shield</b>", "target": "class ForceTankMAX(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Force-Tank MAX\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7, divine_shield=True)\u00a7"}
{"source": "Gahz'rilla NAME_END 6 ATK_END 9 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Whenever this minion takes damage, double its Attack.", "target": "class Gahzrilla(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gahz'rilla\", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 9, effects=[Effect(Damaged(), ActionTag(Give(Buff(DoubleAttack())), SelfSelector()))])\u00a7"}
{"source": "Gallywix's Coin NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Gain 1 Mana Crystal this turn only. NL <i>(Won't trigger Gallywix.)</i>", "target": "class GallywixsCoin(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gallywix's Coin\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.mana < 10:\u00a7            player.mana += 1\u00a7"}
{"source": "Gazlowe NAME_END 3 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever you cast a 1-mana spell, add a random Mech to your hand.", "target": "class Gazlowe(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gazlowe\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, effects=[Effect(SpellCast(ManaCost(1)), ActionTag(AddCard(CollectionSource([IsType(MINION_TYPE.MECH)])), PlayerSelector()))])\u00a7"}
{"source": "Gilblin Stalker NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Stealth</b>", "target": "class GilblinStalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gilblin Stalker\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, stealth=True)\u00a7"}
{"source": "Glaivezooka NAME_END 2 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a random friendly minion +1 Attack.", "target": "class Glaivezooka(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Glaivezooka\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeAttack(1)), MinionSelector(None, picker=RandomPicker())))\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 2)\u00a7"}
{"source": "Gnomeregan Infantry NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b> NL <b>Taunt</b>", "target": "class GnomereganInfantry(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnomeregan Infantry\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, charge=True, taunt=True)\u00a7"}
{"source": "Goblin Blastmage NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> If you have a Mech, deal 4 damage randomly split among all enemies.", "target": "class GoblinBlastmage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goblin Blastmage\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(None, EnemyPlayer(), RandomPicker(4)), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0)))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7"}
{"source": "Goblin Sapper NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Has +4 Attack while your opponent has 6 or more cards in hand.", "target": "class GoblinSapper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Goblin Sapper\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, buffs=[Buff(ChangeAttack(4), GreaterThan(Count(CardSelector(EnemyPlayer())), value=5))])\u00a7"}
{"source": "Grove Tender NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One -</b> Give each player a Mana Crystal; or Each player draws a card.", "target": "class GroveTender(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Grove Tender\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, choices=[\u00a7            Choice(GiftOfMana(), GiveManaCrystal(), PlayerSelector(players=BothPlayer())),\u00a7            Choice(GiftOfCards(), Draw(), PlayerSelector(players=BothPlayer()))\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7"}
{"source": "Hemet Nesingwary NAME_END 6 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy a Beast.", "target": "class HemetNesingwary(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hemet Nesingwary\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.BEAST), players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 3)\u00a7"}
{"source": "Hobgoblin NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you play a 1-Attack minion, give it +2/+2.", "target": "class Hobgoblin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hobgoblin\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionPlaced(BaseAttackEqualTo(1)), ActionTag(Give([Buff(ChangeHealth(2)), Buff(ChangeAttack(2))]), TargetSelector()))])\u00a7"}
{"source": "Illuminator NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b>Secret</b> at the end of your turn, restore 4 health to your hero.", "target": "class Illuminator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Illuminator\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(TurnEnded(HasSecret()), ActionTag(Heal(4), HeroSelector()))])\u00a7"}
{"source": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END NIL RARITY_END NIL", "target": "class Imp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Imp-losion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$4 damage to a minion. Summon a 1/1 Imp for each damage dealt.", "target": "class Implosion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp-losion\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        amount = player.effective_spell_damage(game.random_amount(2, 4))\u00a7        had_shield = self.target.divine_shield\u00a7\u00a7        self.target.damage(amount, self)\u00a7\u00a7        if not had_shield:\u00a7            for i in range(0, amount):\u00a7                imp = Imp()\u00a7                imp.summon(player, game, len(player.minions))\u00a7"}
{"source": "Jeeves NAME_END 1 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the end of each player's turn, that player draws until they have 3 cards.", "target": "class Jeeves(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Jeeves\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(Draw(Difference(Count(CardSelector(players=CurrentPlayer())), value=3)), PlayerSelector(CurrentPlayer())))])\u00a7"}
{"source": "Junkbot NAME_END 1 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END Whenever a friendly Mech dies, gain +2/+2.", "target": "class Junkbot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Junkbot\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.MECH)), ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector()))])\u00a7"}
{"source": "Kezan Mystic NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Take control of a random enemy <b>Secret</b>.", "target": "class KezanMystic(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kezan Mystic\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry([RemoveSecret(EnemyPlayer()), ApplySecret(Same())], PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": "King of Beasts NAME_END 2 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Taunt</b>. <b>Battlecry:</b> Gain +1 Attack for each other Beast you have.", "target": "class KingOfBeasts(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"King of Beasts\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Give(Buff(ChangeAttack(Count(MinionSelector(IsType( MINION_TYPE.BEAST)))))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 6, taunt=True)\u00a7"}
{"source": "Light of the Naaru NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Restore #3 Health. If the target is still damaged, summon a Lightwarden.", "target": "class LightOfTheNaaru(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Light of the Naaru\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.heal(player.effective_heal_power(3), self)\u00a7\u00a7        lightwarden = Lightwarden()\u00a7        if self.target is None:\u00a7            lightwarden.summon(player, game, len(player.minions))\u00a7        elif self.target.health != self.target.calculate_max_health():\u00a7            lightwarden.summon(player, game, len(player.minions))\u00a7"}
{"source": "Lightbomb NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal damage to each minion equal to its Attack.", "target": "class Lightbomb(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightbomb\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(player.minions)\u00a7\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(minion.calculate_attack()), self)\u00a7"}
{"source": "Lil' Exorcist NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b> NL <b>Battlecry:</b> Gain +1/+1 for each enemy <b>Deathrattle</b> minion.", "target": "class LilExorcist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lil' Exorcist\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector(MinionHasDeathrattle(), EnemyPlayer())))), Buff(ChangeHealth(Count(MinionSelector(MinionHasDeathrattle(), EnemyPlayer()))))]), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, taunt=True)\u00a7"}
{"source": "Lost Tallstrider NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class LostTallstrider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lost Tallstrider\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7"}
{"source": "Malorne NAME_END 9 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b>Deathrattle:</b> Shuffle this minion into your deck.", "target": "class Malorne(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Malorne\", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, deathrattle=[Deathrattle(AddCard(ObjectSource(SelfSelector()), add_to_deck=True), PlayerSelector()), Deathrattle(Remove(), SelfSelector())])\u00a7"}
{"source": "Mech-Bear-Cat NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever this minion takes damage, add a <b>Spare Part</b> card to your hand.", "target": "class MechBearCat(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mech-Bear-Cat\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 6, effects=[Effect(Damaged(), ActionTag(AddCard(CardList(spare_part_list)), PlayerSelector()))])\u00a7"}
{"source": "Mechanical Yeti NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Give each player a <b>Spare Part.</b>", "target": "class MechanicalYeti(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mechanical Yeti\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        return Minion(4, 5, deathrattle=Deathrattle(AddCard(CardList(spare_part_list)), PlayerSelector(BothPlayer())))\u00a7"}
{"source": "Mechwarper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END Your Mechs cost (1) less.", "target": "class Mechwarper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mechwarper\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, auras=[Aura(ManaChange(-1), CardSelector(condition=IsType(MINION_TYPE.MECH)))])\u00a7"}
{"source": "Mekgineer Thermaplugg NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END Whenever an enemy minion dies, summon a Leper Gnome.", "target": "class MekgineerThermaplugg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mekgineer Thermaplugg\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, effects=[Effect(MinionDied(player=EnemyPlayer()), ActionTag(Summon(LeperGnome()), PlayerSelector()))])\u00a7"}
{"source": "Metaltooth Leaper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Battlecry</b>: Give your other Mechs +2 Attack.", "target": "class MetaltoothLeaper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Metaltooth Leaper\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(Buff(ChangeAttack(2))), MinionSelector(IsType(MINION_TYPE.MECH))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Micro Machine NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END At the start of each turn, gain +1 Attack.", "target": "class MicroMachine(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Micro Machine\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(TurnStarted(player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7"}
{"source": "Mimiron's Head NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END At the start of your turn, if you have at least 3 Mechs, destroy them all and form V-07-TR-0N.", "target": "class MimironsHead(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mimiron's Head\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, effects=[Effect(TurnStarted(), [ActionTag(Kill(), MinionSelector(IsType(MINION_TYPE.MECH, True)), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH, True))), value=2)), ActionTag(Summon(V07TR0N()), PlayerSelector())])])\u00a7"}
{"source": "Mogor the Ogre NAME_END 7 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END All minions have a 50% chance to attack the wrong enemy.", "target": "class MogorTheOgre(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mogor the Ogre\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 6, effects=[Effect(CharacterAttack(None, BothPlayer()), ActionTag(ChangeTarget(\u00a7            CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), TargetSelector(),\u00a7            And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7"}
{"source": "Muster for Battle NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon three 1/1 Silver Hand Recruits. Equip a 1/4 Weapon.", "target": "class MusterForBattle(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Muster for Battle\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for i in range(0, 3):\u00a7            dude = SilverHandRecruit()\u00a7            dude.summon(player, player.game, len(player.minions))\u00a7        justice = LightsJustice()\u00a7        hammer = justice.create_weapon(player)\u00a7        hammer.card = justice\u00a7        hammer.equip(player)\u00a7"}
{"source": "Neptulon NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Add 4 random Murlocs to your hand. <b>Overload:</b> (3)", "target": "class Neptulon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Neptulon\", 7, CHARACTER_CLASS.SHAMAN, CARD_RARITY.LEGENDARY, overload=3, battlecry=Battlecry(AddCard(CollectionSource([IsType(MINION_TYPE.MURLOC)]), 4), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7)\u00a7"}
{"source": "Ogre Brute NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "target": "class OgreBrute(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ogre Brute\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(Attack(), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7"}
{"source": "Ogre Ninja NAME_END 6 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Stealth</b> NL 50% chance to attack the wrong enemy.", "target": "class OgreNinja(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ogre Ninja\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6, stealth=True, effects=[Effect(Attack(), ActionTag(ChangeTarget( CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), SelfSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7"}
{"source": "Ogre Warmaul NAME_END 4 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END 50% chance to attack the wrong enemy.", "target": "class OgreWarmaul(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ogre Warmaul\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(4, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(ChangeTarget(CharacterSelector(NotCurrentTarget(), EnemyPlayer(), RandomPicker())), HeroSelector(), And(OneIn(2), OpponentMinionCountIsGreaterThan(0))))])\u00a7"}
{"source": "One-eyed Cheat NAME_END 4 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END Pirate RACE_END Rare RARITY_END Whenever you summon a Pirate, gain <b>Stealth</b>.", "target": "class OneeyedCheat(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"One-eyed Cheat\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 1, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.PIRATE)), ActionTag(Give(Stealth()), SelfSelector()))])\u00a7"}
{"source": "Piloted Shredder NAME_END 4 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Summon a random 2-Cost minion.", "target": "class PilotedShredder(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Piloted Shredder\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3, deathrattle=Deathrattle(Summon(CollectionSource([ManaCost(2), IsMinion()])), PlayerSelector()))\u00a7"}
{"source": "Puddlestomper NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Common RARITY_END NIL", "target": "class Puddlestomper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Puddlestomper\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Quartermaster NAME_END 2 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Give your Silver Hand Recruits +2/+2.", "target": "class Quartermaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Quartermaster\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, battlecry=Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), MinionSelector(HasCardName(\"Silver Hand Recruit\"))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5)\u00a7"}
{"source": "Recombobulator NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Transform a friendly minion into a random minion with the same Cost.", "target": "class Recombobulator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Recombobulator\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Transform(CollectionSource([ ManaCost(Attribute(\"mana\", SelfSelector())), IsMinion()])), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Recycle NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Shuffle an enemy minion into your opponent's deck.", "target": "class Recycle(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Recycle\", 6, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.opponent.deck.put_back(self.target)\u00a7        self.target.remove_from_board()\u00a7"}
{"source": "Reversing Switch NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Swap a minion's Attack and Health.", "target": "class ReversingSwitch(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Reversing Switch\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        temp_attack = self.target.calculate_attack()\u00a7        temp_health = self.target.health\u00a7        if temp_attack == 0:\u00a7            self.target.die(None)\u00a7        else:\u00a7            self.target.set_attack_to(temp_health)\u00a7            self.target.set_health_to(temp_attack)\u00a7"}
{"source": "Rusty Horn NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion <b>Taunt</b>.", "target": "class RustyHorn(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rusty Horn\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(Taunt()))\u00a7"}
{"source": "Sabotage NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy a random enemy minion. <b>Combo</b>: And your opponent's weapon.", "target": "class Sabotage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sabotage\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)\u00a7        target = game.random_choice(targets)\u00a7        target.die(None)\u00a7        game.check_delayed()\u00a7        if player.cards_played > 0 and game.other_player.weapon is not None:\u00a7            game.other_player.weapon.destroy()\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 1\u00a7"}
{"source": "Salty Dog NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END NIL", "target": "class SaltyDog(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Salty Dog\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 4)\u00a7"}
{"source": "Seal of Light NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to your hero and gain +2 Attack this turn.", "target": "class SealOfLight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Seal of Light\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.heal(player.effective_heal_power(4), self)\u00a7        player.hero.change_temp_attack(2)\u00a7"}
{"source": "Shadowbomber NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Deal 3 damage to each hero.", "target": "class Shadowbomber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowbomber\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC, battlecry=Battlecry(Damage(3), HeroSelector(players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": "Shadowboxer NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever a character is healed, deal 1 damage to a random enemy.", "target": "class Shadowboxer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowboxer\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(CharacterHealed(player=BothPlayer()), ActionTag(Damage(1), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker(), condition=None)))])\u00a7"}
{"source": "Shielded Minibot NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Divine Shield</b>", "target": "class ShieldedMinibot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shielded Minibot\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, divine_shield=True)\u00a7"}
{"source": "Shieldmaiden NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Gain 5 Armor.", "target": "class Shieldmaiden(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shieldmaiden\", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, battlecry=Battlecry(IncreaseArmor(5), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "Ship's Cannon NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a Pirate, deal 2 damage to a random enemy.", "target": "class ShipsCannon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ship's Cannon\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionSummoned(IsType(MINION_TYPE.PIRATE)), ActionTag(Damage(2), CharacterSelector(None, EnemyPlayer(), RandomPicker())))])\u00a7"}
{"source": "Shrinkmeister NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a minion -2 Attack this turn.", "target": "class Shrinkmeister(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shrinkmeister\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(-2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Siege Engine NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Rare RARITY_END Whenever you gain Armor, give this minion +1 Attack.", "target": "class SiegeEngine(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Siege Engine\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, effects=[Effect(ArmorIncreased(), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7"}
{"source": "Snowchugger NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Freeze</b> any character damaged by this minion.", "target": "class Snowchugger(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Snowchugger\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(DidDamage(), ActionTag(Give(Frozen()), TargetSelector()))])\u00a7"}
{"source": "Soot Spewer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Spell Damage +1</b>", "target": "class SootSpewer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Soot Spewer\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, spell_damage=1)\u00a7"}
{"source": "Spider Tank NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "target": "class SpiderTank(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spider Tank\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4)\u00a7"}
{"source": "Steamwheedle Sniper NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power can target minions.", "target": "class SteamwheedleSniper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Steamwheedle Sniper\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, auras=[Aura(PowerTargetsMinions(), HeroSelector())])\u00a7"}
{"source": "Stonesplinter Trogg NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +1 Attack.", "target": "class StonesplinterTrogg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stonesplinter Trogg\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(SpellCast(player=EnemyPlayer()),\u00a7                                            ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7"}
{"source": "Target Dummy NAME_END 0 ATK_END 2 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Taunt</b>", "target": "class TargetDummy(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Target Dummy\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, taunt=True)\u00a7"}
{"source": "Time Rewinder NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a friendly minion to your hand.", "target": "class TimeRewinder(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Time Rewinder\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.bounce()\u00a7"}
{"source": "Tinker's Sharpsword Oil NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your weapon +3 Attack. <b>Combo:</b> Give a random friendly minion +3 Attack.", "target": "class TinkersSharpswordOil(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tinker's Sharpsword Oil\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.weapon.base_attack += 3\u00a7        player.hero.change_temp_attack(3)\u00a7        if player.cards_played > 0:\u00a7            targets = hearthbreaker.targeting.find_friendly_minion_battlecry_target(player.game, lambda x: x)\u00a7            if targets is not None:\u00a7                target = player.game.random_choice(targets)\u00a7                target.add_buff(Buff(ChangeAttack(3)))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and player.weapon is not None\u00a7"}
{"source": "Trade Prince Gallywix NAME_END 5 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, gain a copy of it and give them a Coin.", "target": "class TradePrinceGallywix(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Trade Prince Gallywix\", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 8, effects=[Effect(SpellCast(Not(HasCardName(\"Gallywix's Coin\")), EnemyPlayer()), ActionTag(AddCard(LastCard()), PlayerSelector(FriendlyPlayer()))), Effect(SpellCast(Not(HasCardName(\"Gallywix's Coin\")), EnemyPlayer()), ActionTag(AddCard(GallywixsCoin()), PlayerSelector(EnemyPlayer())))])\u00a7"}
{"source": "Tree of Life NAME_END -1 ATK_END -1 DEF_END 9 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore all characters to full Health.", "target": "class TreeOfLife(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tree of Life\", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        targets.append(game.other_player.hero)\u00a7        targets.append(game.current_player.hero)\u00a7        for target in targets:\u00a7            target.heal(player.effective_heal_power(target.calculate_max_health()), self)\u00a7"}
{"source": "Troggzor the Earthinator NAME_END 6 ATK_END 6 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever your opponent casts a spell, summon a Burly Rockjaw Trogg.", "target": "class TroggzorTheEarthinator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Troggzor the Earthinator\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Summon(BurlyRockjawTrogg()), PlayerSelector()))])\u00a7"}
{"source": "Unstable Portal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Add a random minion to your hand. It costs (3) less.", "target": "class UnstablePortal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Unstable Portal\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        query = CollectionSource([IsMinion()])\u00a7        new_minon = query.get_card(player, player, self)\u00a7        new_minon.add_buff(Buff(ManaChange(-3)))\u00a7        player.hand.append(new_minon)\u00a7        new_minon.attach(new_minon, player)\u00a7"}
{"source": "Upgraded Repair Bot NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END Mech RACE_END Rare RARITY_END <b>Battlecry:</b> Give a friendly Mech +4 Health.", "target": "class UpgradedRepairBot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Upgraded Repair Bot\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH, battlecry=Battlecry(Give(ChangeHealth(4)), MinionSelector(IsType(MINION_TYPE.MECH), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "V-07-TR-0N NAME_END 4 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Charge</b> NL <b>Mega-Windfury</b> <i>(Can attack four times a turn.)</i>", "target": "class V07TR0N(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"V-07-TR-0N\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False, MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 8, charge=True, buffs=[Buff(MegaWindfury())])\u00a7"}
{"source": "Velen's Chosen NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2/+4 and <b>Spell Damage +1</b>.", "target": "class VelensChosen(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Velen's Chosen\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.change_attack(2)\u00a7        self.target.increase_health(4)\u00a7        self.target.add_buff(Buff(SpellDamage(1)))\u00a7"}
{"source": "Vitality Totem NAME_END 0 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, restore 4 Health to your hero.", "target": "class VitalityTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vitality Totem\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 3, effects=[Effect(TurnEnded(), ActionTag(Heal(4), HeroSelector()))])\u00a7"}
{"source": "Wee Spellstopper NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Adjacent minions can't be targeted by spells or Hero Powers.", "target": "class WeeSpellstopper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wee Spellstopper\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, auras=[Aura(NoSpellTarget(), MinionSelector(Adjacent()))])\u00a7"}
{"source": "Whirling Blades NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +1 Attack.", "target": "class WhirlingBlades(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whirling Blades\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(1)\u00a7"}
{"source": "Whirling Zap-o-matic NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Windfury</b>", "target": "class WhirlingZapomatic(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whirling Zap-o-matic\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(3, 2, windfury=True)\u00a7"}
{"source": "Anub'ar Ambusher NAME_END 5 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Return a random friendly minion to your hand.", "target": "class AnubarAmbusher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Anub'ar Ambusher\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, deathrattle=Deathrattle(Bounce(), MinionSelector(picker=RandomPicker())))\u00a7"}
{"source": "Avenge NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When one of your minions dies, give a random friendly minion +3/+2.", "target": "class Avenge(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Avenge\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, dead_minion, attacker):\u00a7        if len([minion for minion in self.player.minions if not minion.dead]) > 0:\u00a7            target = self.player.game.random_choice(self.player.minions)\u00a7            target.change_attack(3)\u00a7            target.increase_health(2)\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"minion_died\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"minion_died\", self._reveal)\u00a7"}
{"source": "Baron Rivendare NAME_END 1 ATK_END 7 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Your minions trigger their <b>Deathrattles</b> twice.", "target": "class BaronRivendare(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Baron Rivendare\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 7, auras=[Aura(DoubleDeathrattle(), PlayerSelector())])\u00a7"}
{"source": "Dancing Swords NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Your opponent draws a card.", "target": "class DancingSwords(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dancing Swords\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, deathrattle=Deathrattle(Draw(), PlayerSelector(EnemyPlayer())))\u00a7"}
{"source": "Dark Cultist NAME_END 3 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Give a random friendly minion +3 Health.", "target": "class DarkCultist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Cultist\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4, deathrattle=Deathrattle(Give(ChangeHealth(3)), MinionSelector(picker=RandomPicker())))\u00a7"}
{"source": "Duplicate NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When a friendly minion dies, put 2 copies of it into your hand.", "target": "class Duplicate(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Duplicate\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7        self.player = None\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"minion_died\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"minion_died\", self._reveal)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, minion, by):\u00a7        for c in range(0, 2):\u00a7            if len(self.player.hand) < 10:\u00a7                new_card = type(minion.card)()\u00a7                self.player.hand.append(new_card)\u00a7                new_card.attach(new_card, self.player)\u00a7        super().reveal()\u00a7"}
{"source": "Echoing Ooze NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Summon an exact copy of this minion at the end of the turn.", "target": "class EchoingOoze(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Echoing Ooze\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(GiveEffect(Effect(TurnEnded(), ActionTag(Duplicate(SelfSelector()), PlayerSelector()))), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2)\u00a7"}
{"source": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "target": "class Feugen(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Feugen\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Stalagg())))\u00a7"}
{"source": "Feugen NAME_END 4 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> If Stalagg also died this game, summon Thaddius.", "target": "class Feugen(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Feugen\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Stalagg())))\u00a7"}
{"source": "Haunted Creeper NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Deathrattle:</b> Summon two 1/1 Spectral Spiders.", "target": "class HauntedCreeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Haunted Creeper\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, deathrattle=Deathrattle(Summon(SpectralSpider(), 2), PlayerSelector()))\u00a7"}
{"source": "Kel'Thuzad NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, summon all friendly minions that died this turn.", "target": "class KelThuzad(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kel'Thuzad\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 8, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(ResurrectFriendly(), PlayerSelector()))])\u00a7"}
{"source": "Loatheb NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Enemy spells cost (5) more next turn.", "target": "class Loatheb(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Loatheb\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(GiveAura(AuraUntil(ManaChange(5), CardSelector(condition=IsSpell()), TurnEnded())), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "Mad Scientist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Put a <b>Secret</b> from your deck into the battlefield.", "target": "class MadScientist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mad Scientist\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, deathrattle=Deathrattle([RemoveFromDeck(DeckSource(FriendlyPlayer(), [IsSecret()])), ApplySecret(Same())], PlayerSelector()))\u00a7"}
{"source": "Nerubian NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class Nerubian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Nerubian NAME_END 3 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class Nerubian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Nerubian NAME_END 4 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END NIL", "target": "class Nerubian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Nerubian Egg NAME_END 0 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Deathrattle:</b> Summon a 4/4 Nerubian.", "target": "class NerubianEgg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nerubian Egg\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, deathrattle=Deathrattle(Summon(Nerubian()), PlayerSelector()))\u00a7"}
{"source": "Poison Seeds NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy all minions and summon 2/2 Treants to replace them.", "target": "class PoisonSeeds(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Poison Seeds\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.druid import PoisonSeedsTreant\u00a7        targets = hearthbreaker.targeting.find_minion_spell_target(game, lambda m: True)\u00a7        for target in targets:\u00a7            target.die(None)\u00a7\u00a7        game.check_delayed()\u00a7\u00a7        for target in targets:\u00a7            PoisonSeedsTreant().summon(target.player, target.game, len(target.player.minions))\u00a7"}
{"source": "Reincarnate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion, then return it to life with full Health.", "target": "class Reincarnate(SpellCard):\u00a7\u00a7    def __init__(self):\u00a7        super().__init__(\"Reincarnate\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        game.check_delayed()\u00a7        self.target.card.summon(self.target.player, game, len(self.target.player.minions))\u00a7"}
{"source": "Shade of Naxxramas NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Stealth.</b> At the start of your turn, gain +1/+1.", "target": "class ShadeOfNaxxramas(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shade of Naxxramas\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, stealth=True, effects=[Effect(TurnStarted(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\u00a7"}
{"source": "Slime NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "target": "class Slime(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Slime\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 2, taunt=True)\u00a7"}
{"source": "Spectral Spider NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class SpectralSpider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spectral Spider\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "target": "class Stalagg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stalagg\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 4, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Feugen())))\u00a7"}
{"source": "Stalagg NAME_END 7 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> If Feugen also died this game, summon Thaddius.", "target": "class Stalagg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stalagg\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 4, deathrattle=Deathrattle(Summon(Thaddius()), PlayerSelector(), InGraveyard(Feugen())))\u00a7"}
{"source": "Stoneskin Gargoyle NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END At the start of your turn, restore this minion to full Health.", "target": "class StoneskinGargoyle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stoneskin Gargoyle\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(TurnStarted(), ActionTag(Heal(10000), SelfSelector()))])\u00a7"}
{"source": "Thaddius NAME_END 11 ATK_END 11 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "target": "class Thaddius(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Thaddius\", 10, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(11, 11)\u00a7"}
{"source": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class Treant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Treant\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Undertaker NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you summon a minion with <b>Deathrattle</b>, gain +1 Attack.", "target": "class Undertaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Undertaker\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(MinionSummoned(MinionHasDeathrattle()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7"}
{"source": "Unstable Ghoul NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>. <b>Deathrattle:</b> Deal 1 damage to all minions.", "target": "class UnstableGhoul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Unstable Ghoul\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, deathrattle=Deathrattle(Damage(1), MinionSelector(players=BothPlayer())), taunt=True)\u00a7"}
{"source": "Webspinner NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Deathrattle:</b> Add a random Beast card to your hand.", "target": "class Webspinner(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Webspinner\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, deathrattle=Deathrattle(AddCard(CollectionSource([IsType(MINION_TYPE.BEAST)])), PlayerSelector()))\u00a7"}
{"source": "Zombie Chow NAME_END 2 ATK_END 3 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Restore 5 Health to the enemy hero.", "target": "class ZombieChow(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Zombie Chow\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, deathrattle=Deathrattle(Heal(5), HeroSelector(EnemyPlayer())))\u00a7"}
{"source": "Abomination NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b>. <b>Deathrattle:</b> Deal 2 damage to ALL characters.", "target": "class Abomination(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Abomination\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, deathrattle=Deathrattle(Damage(2), CharacterSelector(players=BothPlayer())), taunt=True)\u00a7"}
{"source": "Abusive Sergeant NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a minion +2 Attack this turn.", "target": "class AbusiveSergeant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Abusive Sergeant\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": "Acolyte of Pain NAME_END 1 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, draw a card.", "target": "class AcolyteOfPain(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Acolyte of Pain\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(Damaged(), ActionTag(Draw(), PlayerSelector()))])\u00a7"}
{"source": "Al'Akir the Windlord NAME_END 3 ATK_END 5 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Windfury, Charge, Divine Shield, Taunt</b>", "target": "class AlAkirTheWindlord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Al'Akir the Windlord\", 8, CHARACTER_CLASS.SHAMAN, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, windfury=True, charge=True, divine_shield=True, taunt=True)\u00a7"}
{"source": "Alarm-o-Bot NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, swap this minion with a random one in your hand.", "target": "class AlarmoBot(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Alarm-o-Bot\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 3, effects=[Effect(TurnStarted(), ActionTag(SwapWithHand(), PlayerSelector()))])\u00a7"}
{"source": "Aldor Peacekeeper NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Change an enemy minion's Attack to 1.", "target": "class AldorPeacekeeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Aldor Peacekeeper\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, battlecry=Battlecry(Give(SetAttack(1)), MinionSelector(condition=None, players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Ancestral Spirit NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give a minion \"<b>Deathrattle:</b> Resummon this minion.\"", "target": "class AncestralSpirit(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancestral Spirit\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.deathrattle.append(Deathrattle(Summon(self.target.card), PlayerSelector()))\u00a7"}
{"source": "Ancient Brewmaster NAME_END 5 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Return a friendly minion from the battlefield to your hand.", "target": "class AncientBrewmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancient Brewmaster\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7"}
{"source": "Ancient Mage NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give adjacent minions <b>Spell Damage +1</b>.", "target": "class AncientMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancient Mage\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Give(SpellDamage(1)), MinionSelector(condition=Adjacent())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5)\u00a7"}
{"source": "Ancient Watcher NAME_END 4 ATK_END 5 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Can't attack.", "target": "class AncientWatcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ancient Watcher\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, buffs=[Buff(CantAttack())])\u00a7"}
{"source": "Ancient of Lore NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Choose One -</b> Draw 2 cards; or Restore 5 Health.", "target": "class AncientOfLore(MinionCard):\u00a7    def __init__(self):\u00a7\u00a7        super().__init__(\"Ancient of Lore\", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC, choices=[\u00a7            Choice(AncientSecrets(), Heal(5), HeroSelector()),\u00a7            Choice(AncientTeachings(), Draw(1), PlayerSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "Ancient of War NAME_END 5 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Choose One</b> - NL +5 Attack; or +5 Health and <b>Taunt</b>.", "target": "class AncientOfWar(MinionCard):\u00a7    def __init__(self):\u00a7\u00a7        super().__init__(\"Ancient of War\", 7, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC, choices=[\u00a7            Choice(Health(), Give([Buff(ChangeHealth(5)), Buff(Taunt())]), SelfSelector()),\u00a7            Choice(Attack(), Give([Buff(ChangeAttack(5))]), SelfSelector()),\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "Angry Chicken NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Enrage:</b> +5 Attack.", "target": "class AngryChicken(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Angry Chicken\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, enrage=[Aura(ChangeAttack(5), SelfSelector())])\u00a7"}
{"source": "Arathi Weaponsmith NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Equip a 2/2 weapon.", "target": "class ArathiWeaponsmith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arathi Weaponsmith\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, battlecry=Battlecry(Equip(BattleAxe()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Argent Commander NAME_END 4 ATK_END 2 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Charge</b> NL <b>Divine Shield</b>", "target": "class ArgentCommander(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Commander\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, divine_shield=True, charge=True)\u00a7"}
{"source": "Argent Protector NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a friendly minion <b>Divine Shield</b>.", "target": "class ArgentProtector(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Protector\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, battlecry=Battlecry(Give(DivineShield()), MinionSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Argent Squire NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Divine Shield</b>", "target": "class ArgentSquire(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Argent Squire\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, divine_shield=True)\u00a7"}
{"source": "Armorsmith NAME_END 1 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly minion takes damage, gain 1 Armor.", "target": "class Armorsmith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Armorsmith\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(CharacterDamaged(condition=IsMinion()), ActionTag(IncreaseArmor(), HeroSelector()))])\u00a7"}
{"source": "Ashbringer NAME_END 5 ATK_END -1 DEF_END 5 COST_END 3 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "target": "class Ashbringer(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ashbringer\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        weapon = Weapon(5, 3)\u00a7        return weapon\u00a7"}
{"source": "Auchenai Soulpriest NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your cards and powers that restore Health now deal damage instead.", "target": "class AuchenaiSoulpriest(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Auchenai Soulpriest\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, auras=[Aura(HealAsDamage(), PlayerSelector())])\u00a7"}
{"source": "Avenging Wrath NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $8 damage randomly split among all enemies.", "target": "class AvengingWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Avenging Wrath\", 6, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, player.effective_spell_damage(8)):\u00a7            targets = copy.copy(game.other_player.minions)\u00a7            targets.append(game.other_player.hero)\u00a7            target = game.random_choice(targets)\u00a7            target.damage(1, self)\u00a7"}
{"source": "Azure Drake NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b>Spell Damage +1</b>. <b>Battlecry:</b> Draw a card.", "target": "class AzureDrake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Azure Drake\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Draw(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, spell_damage=1)\u00a7"}
{"source": "Bane of Doom NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $2 damage to a character. If that kills it, summon a random Demon.", "target": "class BaneOfDoom(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bane of Doom\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health <= player.effective_spell_damage(2) and \\ (isinstance(self.target, Minion) and not self.target.divine_shield):\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7            demons = CollectionSource([IsType(MINION_TYPE.DEMON)])\u00a7            demons.get_card(player, player, self).summon(player, game, len(player.minions))\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Baron Geddon NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, deal 2 damage to ALL other characters.", "target": "class BaronGeddon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Baron Geddon\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(2), CharacterSelector(players=BothPlayer())))])\u00a7"}
{"source": "Battle Axe NAME_END 2 ATK_END -1 DEF_END 1 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class BattleAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Battle Axe\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 2)\u00a7"}
{"source": "Battle Rage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw a card for each damaged friendly character.", "target": "class BattleRage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Battle Rage\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        def damaged_character(character):\u00a7            return character.health < character.calculate_max_health()\u00a7\u00a7        super().use(player, game)\u00a7\u00a7        characters = copy.copy(player.minions)\u00a7        characters.append(player.hero)\u00a7\u00a7        characters = [character for character in characters if damaged_character(character)]\u00a7\u00a7        for i in range(0, len(characters)):\u00a7            player.draw()\u00a7"}
{"source": "Bestial Wrath NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Give a friendly Beast +2 Attack and <b>Immune</b> this turn.", "target": "class BestialWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bestial Wrath\", 1, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target, filter_func=lambda minion: minion.card.minion_type is MINION_TYPE.BEAST and minion.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(BuffUntil(Immune(), TurnEnded(player=CurrentPlayer())))\u00a7        self.target.change_temp_attack(2)\u00a7"}
{"source": "Betrayal NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Force an enemy minion to deal its damage to the minions next to it.", "target": "class Betrayal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Betrayal\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_enemy_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        left_minion = None\u00a7        right_minion = None\u00a7\u00a7        index = self.target.index\u00a7        if index > 0:\u00a7            left_minion = game.other_player.minions[index - 1]\u00a7        if index < min(len(game.other_player.minions) - 1, 6):\u00a7            right_minion = game.other_player.minions[index + 1]\u00a7\u00a7        original_immune = self.target.immune\u00a7        self.target.immune = True\u00a7        if left_minion is not None:\u00a7            left_minion.damage(self.target.calculate_attack(), self.target)\u00a7        if right_minion is not None:\u00a7            right_minion.damage(self.target.calculate_attack(), self.target)\u00a7        self.target.immune = original_immune\u00a7"}
{"source": "Big Game Hunter NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Destroy a minion with an Attack of 7 or more.", "target": "class BigGameHunter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Big Game Hunter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Kill(), MinionSelector(AttackGreaterThan(6), BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2)\u00a7"}
{"source": "Bite NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Give your hero +4 Attack this turn and 4 Armor.", "target": "class Bite(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bite\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.hero.change_temp_attack(4)\u00a7        player.hero.increase_armor(4)\u00a7"}
{"source": "Blessing of Wisdom NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Whenever it attacks, draw a card.", "target": "class BlessingOfWisdom(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blessing of Wisdom\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player is game.players[0]:\u00a7            draw_player = PlayerOne()\u00a7        else:\u00a7            draw_player = PlayerTwo()\u00a7        self.target.add_effect(Effect(Attack(), ActionTag(Draw(), PlayerSelector(draw_player))))\u00a7"}
{"source": "Blizzard NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all enemy minions and <b>Freeze</b> them.", "target": "class Blizzard(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blizzard\", 6, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7        for minion in game.other_player.minions:\u00a7            minion.add_buff(Buff(Frozen()))\u00a7"}
{"source": "Blood Fury NAME_END 3 ATK_END -1 DEF_END 3 COST_END 8 DUR_END Weapon TYPE_END Warlock PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class BloodFury(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blood Fury\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 8)\u00a7"}
{"source": "Blood Imp NAME_END 0 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Stealth</b>. At the end of your turn, give another random friendly minion +1 Health.", "target": "class BloodImp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blood Imp\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 1, stealth=True, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\u00a7"}
{"source": "Blood Knight NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> All minions lose <b>Divine Shield</b>. Gain +3/+3 for each Shield lost.", "target": "class BloodKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blood Knight\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=(Battlecry([Give([Buff(ChangeAttack(Count(MinionSelector(HasDivineShield(), BothPlayer())), 3)), Buff(ChangeHealth(Count(MinionSelector(HasDivineShield(), BothPlayer())), 3))])], SelfSelector()), Battlecry(RemoveDivineShields(), (MinionSelector(HasDivineShield(), BothPlayer())))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Bloodmage Thalnos NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Spell Damage +1</b>. <b>Deathrattle:</b> Draw a card.", "target": "class BloodmageThalnos(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodmage Thalnos\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, spell_damage=1, deathrattle=Deathrattle(Draw(), PlayerSelector()))\u00a7"}
{"source": "Bloodsail Corsair NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Rare RARITY_END <b>Battlecry:</b> Remove 1 Durability from your opponent's weapon.", "target": "class BloodsailCorsair(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodsail Corsair\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(DecreaseDurability(), WeaponSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2)\u00a7"}
{"source": "Bloodsail Raider NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b>Battlecry:</b> Gain Attack equal to the Attack of your weapon.", "target": "class BloodsailRaider(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Bloodsail Raider\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry(Give(Buff(ChangeAttack(Attribute(\"base_attack\", WeaponSelector())))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Cairne Bloodhoof NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> Summon a 4/5 Baine Bloodhoof.", "target": "class CairneBloodhoof(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cairne Bloodhoof\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, deathrattle=Deathrattle(Summon(BaineBloodhoof()), PlayerSelector()))\u00a7"}
{"source": "Captain Greenskin NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Legendary RARITY_END <b>Battlecry:</b> Give your weapon +1/+1.", "target": "class CaptainGreenskin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Captain Greenskin\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.PIRATE, battlecry=Battlecry([IncreaseWeaponAttack(1), IncreaseDurability()], WeaponSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7"}
{"source": "Cenarius NAME_END 5 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Choose One</b> - Give your other minions +2/+2; or Summon two 2/2 Treants with <b>Taunt</b>.", "target": "class Cenarius(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cenarius\", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.LEGENDARY, choices=[\u00a7            Choice(IncreaseStats(), Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2)), Buff(Taunt())]), MinionSelector()),\u00a7            Choice(SummonTreants(), Summon(TauntTreant(), 2), PlayerSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 8)\u00a7"}
{"source": "Circle of Healing NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Restore #4 Health to ALL minions.", "target": "class CircleOfHealing(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Circle of Healing\", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(player.minions)\u00a7\u00a7        for minion in targets:\u00a7            minion.heal(player.effective_heal_power(4), self)\u00a7"}
{"source": "Cold Blood NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a minion +2 Attack. <b>Combo:</b> +4 Attack instead.", "target": "class ColdBlood(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cold Blood\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if player.cards_played > 0:\u00a7            self.target.change_attack(4)\u00a7        else:\u00a7            self.target.change_attack(2)\u00a7"}
{"source": "Coldlight Oracle NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b>Battlecry:</b> Each player draws 2 cards.", "target": "class ColdlightOracle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Coldlight Oracle\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Draw(2), PlayerSelector(players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Coldlight Seer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END <b>Battlecry:</b> Give ALL other Murlocs +2 Health.", "target": "class ColdlightSeer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Coldlight Seer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC, battlecry=Battlecry(Give(ChangeHealth(2)), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3)\u00a7"}
{"source": "Commanding Shout NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Your minions can't be reduced below 1 Health this turn. Draw a card.", "target": "class CommandingShout(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Commanding Shout\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        player.add_aura(AuraUntil(MinimumHealth(1), MinionSelector(), TurnEnded()))\u00a7\u00a7        player.draw()\u00a7"}
{"source": "Counterspell NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When your opponent casts a spell, <b>Counter</b> it.", "target": "class Counterspell(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Counterspell\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7    def _reveal(self, card, index):\u00a7        if card.is_spell():\u00a7            card.cancel = True\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"card_played\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"card_played\", self._reveal)\u00a7"}
{"source": "Crazed Alchemist NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Swap the Attack and Health of a minion.", "target": "class CrazedAlchemist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Crazed Alchemist\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(SwapStats('health', 'attack', False), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Cruel Taskmaster NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 1 damage to a minion and give it +2 Attack.", "target": "class CruelTaskmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cruel Taskmaster\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, battlecry=Battlecry([Damage(1), Give(ChangeAttack(2))], MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Cult Master NAME_END 4 ATK_END 2 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever one of your other minions dies, draw a card.", "target": "class CultMaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cult Master\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, effects=[Effect(MinionDied(), ActionTag(Draw(), PlayerSelector()))])\u00a7"}
{"source": "Damaged Golem NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END NIL", "target": "class DamagedGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Damaged Golem\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": "Dark Iron Dwarf NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a minion +2 Attack this turn.", "target": "class DarkIronDwarf(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Iron Dwarf\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(BuffUntil(ChangeAttack(2), TurnEnded(player=CurrentPlayer()))), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Deadly Shot NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a random enemy minion.", "target": "class DeadlyShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deadly Shot\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = hearthbreaker.targeting.find_enemy_minion_battlecry_target(player.game, lambda x: True)\u00a7        target = game.random_choice(targets)\u00a7        target.die(None)\u00a7        game.check_delayed()\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 1\u00a7"}
{"source": "Deathwing NAME_END 12 ATK_END 12 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy all other minions and discard your hand.", "target": "class Deathwing(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Deathwing\", 10, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=(Battlecry(Kill(), MinionSelector(players=BothPlayer())), Battlecry(Discard(amount=Count(CardSelector())), PlayerSelector())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(12, 12)\u00a7"}
{"source": "Defias Bandit NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class DefiasBandit(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defias Bandit\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": "Defias Ringleader NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Combo:</b> Summon a 2/1 Defias Bandit.", "target": "class DefiasRingleader(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defias Ringleader\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, combo=Battlecry(Summon(DefiasBandit()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Demolisher NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Rare RARITY_END At the start of your turn, deal 2 damage to a random enemy.", "target": "class Demolisher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demolisher\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, effects=[Effect(TurnStarted(), ActionTag(Damage(2), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))])\u00a7"}
{"source": "Demonfire NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to a minion. If it\u2019s a friendly Demon, give it +2/+2 instead.", "target": "class Demonfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demonfire\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(player.game.current_player.minions)\u00a7        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:\u00a7            self.target.change_attack(2)\u00a7            self.target.increase_health(2)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Demonfire NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Enchantment TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END This Demon has +2/+2.", "target": "class Demonfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demonfire\", 2, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(player.game.current_player.minions)\u00a7        if self.target.card.minion_type is MINION_TYPE.DEMON and self.target in targets:\u00a7            self.target.change_attack(2)\u00a7            self.target.increase_health(2)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Devilsaur NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class Devilsaur(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Devilsaur\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "Dire Wolf Alpha NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END Adjacent minions have +1 Attack.", "target": "class DireWolfAlpha(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dire Wolf Alpha\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, auras=[Aura(ChangeAttack(1), MinionSelector(Adjacent()))])\u00a7"}
{"source": "Divine Favor NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw cards until you have as many in hand as your opponent.", "target": "class DivineFavor(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Divine Favor\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        difference = len(game.other_player.hand) - len(player.hand)\u00a7        for i in range(0, difference):\u00a7            player.draw()\u00a7"}
{"source": "Doomsayer NAME_END 0 ATK_END 7 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END At the start of your turn, destroy ALL minions.", "target": "class Doomsayer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Doomsayer\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 7, effects=[Effect(TurnStarted(), ActionTag(Kill(), MinionSelector(condition=None, players=BothPlayer())))])\u00a7"}
{"source": "Dread Corsair NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END <b>Taunt.</b> Costs (1) less per Attack of your weapon.", "target": "class DreadCorsair(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dread Corsair\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE, buffs=[Buff(ManaChange(Attribute(\"attack\", WeaponSelector()), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, taunt=True)\u00a7"}
{"source": "Dream NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Return a minion to its owner's hand.", "target": "class Dream(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dream\", 0, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.bounce()\u00a7"}
{"source": "Druid of the Claw NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "target": "class DruidOfTheClaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Claw\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),\u00a7            Choice(BearForm(), Transform(BearDruid()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One -</b> <b>Charge</b>; or +2 Health and <b>Taunt</b>.", "target": "class DruidOfTheClaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Claw\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),\u00a7            Choice(BearForm(), Transform(BearDruid()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Druid of the Claw NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Charge</b>", "target": "class DruidOfTheClaw(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Claw\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(CatForm(), Transform(CatDruid()), SelfSelector()),\u00a7            Choice(BearForm(), Transform(BearDruid()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Dust Devil NAME_END 3 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Windfury</b>. <b>Overload:</b> (2)", "target": "class DustDevil(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dust Devil\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 1, windfury=True)\u00a7"}
{"source": "Eaglehorn Bow NAME_END 3 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a friendly <b>Secret</b> is revealed, gain +1 Durability.", "target": "class EaglehornBow(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Eaglehorn Bow\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 2, effects=[Effect(SecretRevealed(), ActionTag(IncreaseDurability(), WeaponSelector()))])\u00a7"}
{"source": "Earthen Ring Farseer NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 3 Health.", "target": "class EarthenRingFarseer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Earthen Ring Farseer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(3), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Edwin VanCleef NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Combo:</b> Gain +2/+2 for each card played earlier this turn.", "target": "class EdwinVanCleef(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Edwin VanCleef\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Give([Buff(ChangeAttack(Attribute(\"cards_played\", PlayerSelector()), 2)), Buff(ChangeHealth(Attribute(\"cards_played\", PlayerSelector()), 2))]), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Emerald Drake NAME_END 7 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "target": "class EmeraldDrake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emerald Drake\", 4, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 6)\u00a7"}
{"source": "Emperor Cobra NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END Destroy any minion damaged by this minion.", "target": "class EmperorCobra(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emperor Cobra\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])\u00a7"}
{"source": "Equality NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Change the Health of ALL minions to 1.", "target": "class Equality(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Equality\", 2, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(player.minions)\u00a7\u00a7        for minion in targets:\u00a7            minion.set_health_to(1)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and (len(player.minions) > 0 or len(game.other_player.minions) > 0)\u00a7"}
{"source": "Ethereal Arcanist NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you control a <b>Secret</b> at the end of your turn, gain +2/+2.", "target": "class EtherealArcanist(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ethereal Arcanist\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, effects=[Effect(TurnEnded(HasSecret()), ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(TurnEnded(HasSecret()), ActionTag(Give(ChangeHealth(2)), SelfSelector()))])\u00a7"}
{"source": "Eviscerate NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage. <b>Combo:</b> Deal $4 damage instead.", "target": "class Eviscerate(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Eviscerate\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if player.cards_played > 0:\u00a7            self.target.damage(player.effective_spell_damage(4), self)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Explosive Shot NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage to a minion and $2 damage to adjacent ones.", "target": "class ExplosiveShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Explosive Shot\", 5, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        index = self.target.index\u00a7        if self.target.index < len(self.target.player.minions) - 1:\u00a7            minion = self.target.player.minions[index + 1]\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(5), self)\u00a7\u00a7        if self.target.index > 0:\u00a7            minion = self.target.player.minions[index - 1]\u00a7            minion.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Faceless Manipulator NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Battlecry:</b> Choose a minion and become a copy of it.", "target": "class FacelessManipulator(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Faceless Manipulator\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, battlecry=Battlecry(Replace(), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Faerie Dragon NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Can't be targeted by spells or Hero Powers.", "target": "class FaerieDragon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Faerie Dragon\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, spell_targetable=False)\u00a7"}
{"source": "Far Sight NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END Draw a card. That card costs (3) less.", "target": "class FarSight(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Far Sight\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        def reduce_cost(card):\u00a7            card.add_buff(Buff(ManaChange(-3)))\u00a7\u00a7        super().use(player, game)\u00a7        player.bind_once(\"card_drawn\", reduce_cost)\u00a7        player.draw()\u00a7"}
{"source": "Felguard NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b>Taunt</b>. <b>Battlecry:</b> Destroy one of your Mana Crystals.", "target": "class Felguard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Felguard\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(DestroyManaCrystal(), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True)\u00a7"}
{"source": "Fen Creeper NAME_END 3 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class FenCreeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fen Creeper\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6, taunt=True)\u00a7"}
{"source": "Feral Spirit NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon two 2/3 Spirit Wolves with <b>Taunt</b>. <b>Overload:</b> (2)", "target": "class FeralSpirit(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Feral Spirit\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for i in range(0, 2):\u00a7            spirit_wolf = hearthbreaker.cards.minions.shaman.SpiritWolf()\u00a7            spirit_wolf.summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7"}
{"source": "Finkle Einhorn NAME_END 3 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "target": "class FinkleEinhorn(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Finkle Einhorn\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Flame Imp NAME_END 3 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Battlecry:</b> Deal 3 damage to your hero.", "target": "class FlameImp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flame Imp\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(3), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Flesheating Ghoul NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever a minion dies, gain +1 Attack.", "target": "class FlesheatingGhoul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flesheating Ghoul\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, effects=[Effect(MinionDied(player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7"}
{"source": "Force of Nature NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Summon three 2/2 Treants with <b>Charge</b> that die at the end of the turn.", "target": "class ForceOfNature(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Force of Nature\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.druid import Treant\u00a7        for i in [0, 1, 2]:\u00a7            treant_card = Treant()\u00a7            treant_card.summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7"}
{"source": "Forked Lightning NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $2 damage to 2 random enemy minions. <b>Overload:</b> (2)", "target": "class ForkedLightning(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Forked Lightning\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minions = copy.copy(game.other_player.minions)\u00a7        for i in range(0, 2):\u00a7            minion = game.random_choice(minions)\u00a7            minions.remove(minion)\u00a7            minion.damage(player.effective_spell_damage(3), self)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 2\u00a7"}
{"source": "Freezing Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When an enemy minion attacks, return it to its owner's hand and it costs (2) more.", "target": "class FreezingTrap(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Freezing Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if isinstance(attacker, Minion) and not attacker.removed:\u00a7            attacker.bounce()\u00a7            attacker.card.add_buff(Buff(ManaChange(2)))\u00a7            super().reveal()\u00a7"}
{"source": "Frost Elemental NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> <b>Freeze</b> a character.", "target": "class FrostElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frost Elemental\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Give(Frozen()), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "Frothing Berserker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a minion takes damage, gain +1 Attack.", "target": "class FrothingBerserker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frothing Berserker\", 3, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(CharacterDamaged(player=BothPlayer(), condition=IsMinion()), ActionTag(Give(ChangeAttack(1)), SelfSelector()))])\u00a7"}
{"source": "Gadgetzan Auctioneer NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, draw a card.", "target": "class GadgetzanAuctioneer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gadgetzan Auctioneer\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(SpellCast(), ActionTag(Draw(), PlayerSelector()))])\u00a7"}
{"source": "Gladiator's Longbow NAME_END 5 ATK_END -1 DEF_END 7 COST_END 2 DUR_END Weapon TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your hero is <b>Immune</b> while attacking.", "target": "class GladiatorsLongbow(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gladiator's Longbow\", 7, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(5, 2, effects=[Effect(CharacterAttack(IsHero()), ActionTag(Give(BuffUntil(Immune(), AttackCompleted())), HeroSelector()))])\u00a7"}
{"source": "Grommash Hellscream NAME_END 4 ATK_END 9 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Charge</b> NL <b>Enrage:</b> +6 Attack", "target": "class GrommashHellscream(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Grommash Hellscream\", 8, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 9, charge=True, enrage=[Aura(ChangeAttack(6), SelfSelector())])\u00a7"}
{"source": "Gruul NAME_END 7 ATK_END 7 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of each turn, gain +1/+1 .", "target": "class Gruul(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gruul\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7, effects=[Effect(TurnEnded(player=BothPlayer()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\u00a7"}
{"source": "Harrison Jones NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy your opponent's weapon and draw cards equal to its Durability.", "target": "class HarrisonJones(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Harrison Jones\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=(Battlecry(Draw(Attribute(\"durability\", WeaponSelector(EnemyPlayer()))), PlayerSelector()), Battlecry(Destroy(), WeaponSelector(EnemyPlayer()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7"}
{"source": "Harvest Golem NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Deathrattle:</b> Summon a 2/1 Damaged Golem.", "target": "class HarvestGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Harvest Golem\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, deathrattle=Deathrattle(Summon(DamagedGolem()), PlayerSelector()))\u00a7"}
{"source": "Headcrack NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to the enemy hero. <b>Combo:</b> Return this to your hand next turn.", "target": "class Headcrack(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Headcrack\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        game.other_player.hero.damage(player.effective_spell_damage(2), self)\u00a7        if player.cards_played > 0:\u00a7            player.add_effect(Effect(TurnEnded(), ActionTag(AddCard(self), PlayerSelector())))\u00a7"}
{"source": "Heavy Axe NAME_END 1 ATK_END -1 DEF_END 1 COST_END 3 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class HeavyAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Heavy Axe\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 3)\u00a7"}
{"source": "Hogger NAME_END 4 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, summon a 2/2 Gnoll with <b>Taunt</b>.", "target": "class Hogger(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hogger\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(TurnEnded(), ActionTag(Summon(Gnoll()), PlayerSelector()))])\u00a7"}
{"source": "Holy Fire NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. Restore #5 Health to your hero.", "target": "class HolyFire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Fire\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(5), self)\u00a7        player.hero.heal(player.effective_heal_power(5), self)\u00a7"}
{"source": "Hungry Crab NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Epic RARITY_END <b>Battlecry:</b> Destroy a Murloc and gain +2/+2.", "target": "class HungryCrab(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hungry Crab\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.BEAST, battlecry=(Battlecry(Kill(), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())), Battlecry(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]), SelfSelector())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2)\u00a7"}
{"source": "Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END NIL", "target": "class Hyena(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hyena\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Ice Barrier NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero is attacked, gain 8 Armor.", "target": "class IceBarrier(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ice Barrier\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if target is self.player.hero and not attacker.removed:\u00a7            attacker.player.game.other_player.hero.armor += 8\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7"}
{"source": "Ice Block NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Secret:</b> When your hero takes fatal damage, prevent it and become <b>Immune</b> this turn.", "target": "class IceBlock(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ice Block\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, character, attacker, amount):\u00a7        if character.is_hero():\u00a7            if character.health - amount <= 0:\u00a7                character.add_buff(BuffUntil(Immune(), TurnEnded(player=CurrentPlayer())))\u00a7                super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"pre_damage\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"pre_damage\", self._reveal)\u00a7"}
{"source": "Ice Lance NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Freeze</b> a character. If it was already <b>Frozen</b>, deal $4 damage instead.", "target": "class IceLance(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ice Lance\", 1, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.frozen:\u00a7            self.target.damage(4, self)\u00a7        else:\u00a7            self.target.add_buff(Buff(Frozen()))\u00a7"}
{"source": "Illidan Stormrage NAME_END 7 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Legendary RARITY_END Whenever you play a card, summon a 2/1 Flame of Azzinoth.", "target": "class IllidanStormrage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Illidan Stormrage\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 5, effects=[Effect(CardPlayed(), ActionTag(Summon(FlameOfAzzinoth()), PlayerSelector()))])\u00a7"}
{"source": "Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Demon RACE_END Rare RARITY_END NIL", "target": "class Imp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, False, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Imp Master NAME_END 1 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, deal 1 damage to this minion and summon a 1/1 Imp.", "target": "class ImpMaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp Master\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 5, effects=[Effect(TurnEnded(), ActionTag(Damage(1), SelfSelector())), Effect(TurnEnded(), ActionTag(Summon(Imp()), PlayerSelector()))])\u00a7"}
{"source": "Inner Fire NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Change a minion's Attack to be equal to its Health.", "target": "class InnerFire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Inner Fire\", 1, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        delta = self.target.health - self.target.calculate_attack()\u00a7        self.target.change_attack(delta)\u00a7"}
{"source": "Inner Rage NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion and give it +2 Attack.", "target": "class InnerRage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Inner Rage\", 0, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(1, self)\u00a7        self.target.change_attack(2)\u00a7"}
{"source": "Ironbeak Owl NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Battlecry:</b> <b>Silence</b> a minion.", "target": "class IronbeakOwl(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ironbeak Owl\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": "Jungle Panther NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Stealth</b>", "target": "class JunglePanther(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Jungle Panther\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, stealth=True)\u00a7"}
{"source": "Keeper of the Grove NAME_END 2 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One</b> - Deal 2 damage; or <b>Silence</b> a minion.", "target": "class KeeperOfTheGrove(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Keeper of the Grove\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, choices=[\u00a7            Choice(Moonfire(), Damage(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())),\u00a7            Choice(Dispel(), Silence(), MinionSelector(players=BothPlayer(), picker=UserPicker()))\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7"}
{"source": "Kidnapper NAME_END 5 ATK_END 3 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Combo:</b> Return a minion to its owner's hand.", "target": "class Kidnapper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kidnapper\", 6, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC, combo=Battlecry(Bounce(), MinionSelector(picker=UserPicker(), players=BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 3)\u00a7"}
{"source": "King Krush NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b>Charge</b>", "target": "class KingKrush(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"King Krush\", 9, CHARACTER_CLASS.HUNTER, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, charge=True)\u00a7"}
{"source": "King Mukla NAME_END 5 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b>Battlecry:</b> Give your opponent 2 Bananas.", "target": "class KingMukla(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"King Mukla\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(AddCard(Bananas(), 2), PlayerSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "Laughing Sister NAME_END 3 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Can't be targeted by spells or Hero Powers.", "target": "class LaughingSister(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Laughing Sister\", 3, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, spell_targetable=False)\u00a7"}
{"source": "Lava Burst NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $5 damage. <b>Overload:</b> (2)", "target": "class LavaBurst(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lava Burst\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(5), self)\u00a7"}
{"source": "Lay on Hands NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Restore #8 Health. Draw 3 cards.", "target": "class LayOnHands(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lay on Hands\", 8, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.heal(player.effective_heal_power(8), self)\u00a7        player.draw()\u00a7        player.draw()\u00a7        player.draw()\u00a7"}
{"source": "Leeroy Jenkins NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Charge</b>. <b>Battlecry:</b> Summon two 1/1 Whelps for your opponent.", "target": "class LeeroyJenkins(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Leeroy Jenkins\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Summon(Whelp(), 2), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 2, charge=True)\u00a7"}
{"source": "Leper Gnome NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Deal 2 damage to the enemy hero.", "target": "class LeperGnome(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Leper Gnome\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, deathrattle=Deathrattle(Damage(2), HeroSelector(EnemyPlayer())))\u00a7"}
{"source": "Lightning Bolt NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. <b>Overload:</b> (1)", "target": "class LightningBolt(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightning Bolt\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, overload=1)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.damage(player.effective_spell_damage(3), self)\u00a7"}
{"source": "Lightning Storm NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2-$3 damage to all enemy minions. <b>Overload:</b> (2)", "target": "class LightningStorm(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightning Storm\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, overload=2)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in copy.copy(game.other_player.minions):\u00a7            minion.damage(player.effective_spell_damage(game.random_amount(2, 3)), self)\u00a7"}
{"source": "Lightspawn NAME_END 0 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END This minion's Attack is always equal to its Health.", "target": "class Lightspawn(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightspawn\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 5, buffs=[Buff(AttackEqualsHealth())])\u00a7"}
{"source": "Loot Hoarder NAME_END 2 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Draw a card.", "target": "class LootHoarder(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Loot Hoarder\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, deathrattle=Deathrattle(Draw(), PlayerSelector()))\u00a7"}
{"source": "Lord Jaraxxus NAME_END 0 ATK_END 15 DEF_END 0 COST_END -1 DUR_END Hero TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END NIL", "target": "class LordJaraxxus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lord Jaraxxus\", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(ReplaceHeroWithMinion(Jaraxxus()), HeroSelector()), Battlecry(Remove(), SelfSelector()), Battlecry(Equip(BloodFury()), PlayerSelector())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 15)\u00a7"}
{"source": "Lord Jaraxxus NAME_END 3 ATK_END 15 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy your hero and replace it with Lord Jaraxxus.", "target": "class LordJaraxxus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lord Jaraxxus\", 9, CHARACTER_CLASS.WARLOCK, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry(ReplaceHeroWithMinion(Jaraxxus()), HeroSelector()), Battlecry(Remove(), SelfSelector()), Battlecry(Equip(BloodFury()), PlayerSelector())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 15)\u00a7"}
{"source": "Lorewalker Cho NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Whenever a player casts a spell, put a copy into the other player\u2019s hand.", "target": "class LorewalkerCho(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lorewalker Cho\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, effects=[Effect(SpellCast(player=BothPlayer()), ActionTag(AddCard(LastCard()), PlayerSelector(OtherPlayer())))])\u00a7"}
{"source": "Mad Bomber NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Deal 3 damage randomly split between all other characters.", "target": "class MadBomber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mad Bomber\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(), picker=RandomPicker(3))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Malygos NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Spell Damage +5</b>", "target": "class Malygos(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Malygos\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 12, spell_damage=5)\u00a7"}
{"source": "Mana Addict NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, gain +2 Attack this turn.", "target": "class ManaAddict(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Addict\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(SpellCast(), ActionTag(Give(BuffUntil(ChangeAttack(2), TurnEnded())), SelfSelector()))])\u00a7"}
{"source": "Mana Tide Totem NAME_END 0 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Rare RARITY_END At the end of your turn, draw a card.", "target": "class ManaTideTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Tide Totem\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, minion_type=MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 3, effects=[Effect(TurnEnded(), ActionTag(Draw(), PlayerSelector()))])\u00a7"}
{"source": "Mark of Nature NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Give a minion +4 Attack; or +4 Health and <b>Taunt</b>.", "target": "class MarkOfNature(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mark of Nature\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        class MarkOfNatureAttack(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Mark of Nature +4 Attack\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7            def use(self, player, game):\u00a7                target.change_attack(4)\u00a7\u00a7        class MarkOfNatureHealth(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Mark of Nature +4 Health\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7            def use(self, player, game):\u00a7                target.increase_health(4)\u00a7                target.taunt = True\u00a7\u00a7        super().use(player, game)\u00a7        target = self.target\u00a7        option = game.current_player.agent.choose_option([MarkOfNatureAttack(), MarkOfNatureHealth()], player)\u00a7        option.use(player, game)\u00a7"}
{"source": "Mass Dispel NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Silence</b> all enemy minions. Draw a card.", "target": "class MassDispel(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mass Dispel\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for minion in game.other_player.minions:\u00a7            minion.silence()\u00a7\u00a7        player.draw()\u00a7"}
{"source": "Master Swordsmith NAME_END 1 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Attack.", "target": "class MasterSwordsmith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Master Swordsmith\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 3, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeAttack(1)), MinionSelector(picker=RandomPicker())))])\u00a7"}
{"source": "Master of Disguise NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Give a friendly minion <b>Stealth</b>.", "target": "class MasterOfDisguise(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Master of Disguise\", 4, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Give(Stealth()), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Millhouse Manastorm NAME_END 4 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Enemy spells cost (0) next turn.", "target": "class MillhouseManastorm(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Millhouse Manastorm\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(GiveAura(AuraUntil(ManaChange(-100), CardSelector(condition=IsSpell()), TurnEnded())), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Mind Control Tech NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> If your opponent has 4 or more minions, take control of one at random.", "target": "class MindControlTech(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mind Control Tech\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, battlecry=Battlecry(Steal(), MinionSelector(players=EnemyPlayer(), condition=None, picker=RandomPicker()), OpponentMinionCountIsGreaterThan(3)) )\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Mindgames NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of a random minion from your opponent's deck into the battlefield.", "target": "class Mindgames(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mindgames\", 4, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minion_card = game.random_draw(game.other_player.deck.cards, lambda c: not c.drawn and isinstance(c, MinionCard))\u00a7        if not minion_card:\u00a7            minion_card = ShadowOfNothing()\u00a7        else:\u00a7            minion_card = copy.copy(minion_card)\u00a7        minion_card.drawn = True\u00a7        minion_card.summon(player, game, 0)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7"}
{"source": "Mirror Entity NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your opponent plays a minion, summon a copy of it.", "target": "class MirrorEntity(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mirror Entity\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, minion):\u00a7        if len(self.player.minions) < 7:\u00a7            mirror = minion.copy(self.player)\u00a7            mirror.add_to_board(len(self.player.minions))\u00a7            minion.player.trigger(\"minion_summoned\", mirror)\u00a7            minion.player.trigger(\"after_added\", mirror)\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"minion_played\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"minion_played\", self._reveal)\u00a7        self.player = None\u00a7"}
{"source": "Molten Giant NAME_END 8 ATK_END 8 DEF_END 20 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each damage your hero has taken.", "target": "class MoltenGiant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Molten Giant\", 20, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Attribute(\"damage\", HeroSelector()), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7"}
{"source": "Mortal Strike NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $4 damage. If you have 12 or less Health, deal $6 instead.", "target": "class MortalStrike(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mortal Strike\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.hero.health <= 12:\u00a7            self.target.damage(player.effective_spell_damage(6), self)\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(4), self)\u00a7"}
{"source": "Mountain Giant NAME_END 8 ATK_END 8 DEF_END 12 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other card in your hand.", "target": "class MountainGiant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mountain Giant\", 12, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(CardSelector()), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7"}
{"source": "Murloc Tidecaller NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Rare RARITY_END Whenever a Murloc is summoned, gain +1 Attack.", "target": "class MurlocTidecaller(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Tidecaller\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[(Effect(MinionSummoned(IsType(MINION_TYPE.MURLOC), player=BothPlayer()), ActionTag(Give(ChangeAttack(1)), SelfSelector())))])\u00a7"}
{"source": "Murloc Warleader NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Murloc RACE_END Epic RARITY_END ALL other Murlocs have +2/+1.", "target": "class MurlocWarleader(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Murloc Warleader\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MURLOC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, auras=[Aura(ChangeAttack(2), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer())), Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.MURLOC), BothPlayer()))])\u00a7"}
{"source": "Nat Pagle NAME_END 0 ATK_END 4 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the start of your turn, you have a 50% chance to draw an extra card.", "target": "class NatPagle(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nat Pagle\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, effects=[Effect(TurnStarted(), ActionTag(Draw(), PlayerSelector(), OneIn(2)))])\u00a7"}
{"source": "Naturalize NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Destroy a minion. Your opponent draws 2 cards.", "target": "class Naturalize(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Naturalize\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        game.other_player.draw()\u00a7        game.other_player.draw()\u00a7"}
{"source": "Nightmare NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Give a minion +5/+5. At the start of your next turn, destroy it.", "target": "class Nightmare(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nightmare\", 0, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False, hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.add_buff(Buff(ChangeAttack(5)))\u00a7        self.target.add_buff(Buff(ChangeHealth(5)))\u00a7        self.target.add_effect(Effect(TurnStarted(player=CurrentPlayer()), ActionTag(Kill(), SelfSelector())))\u00a7"}
{"source": "Nozdormu NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Players only have 15 seconds to take their turns.", "target": "class Nozdormu(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nozdormu\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7"}
{"source": "Onyxia NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Summon 1/1 Whelps until your side of the battlefield is full.", "target": "class Onyxia(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Onyxia\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Summon(Whelp(), 6), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7"}
{"source": "Panther NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class Panther(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Panther\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(3, 2, MINION_TYPE.BEAST)\u00a7"}
{"source": "Patient Assassin NAME_END 1 ATK_END 1 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Stealth</b>. Destroy any minion damaged by this minion.", "target": "class PatientAssassin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Patient Assassin\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, stealth=True, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])\u00a7"}
{"source": "Perdition's Blade NAME_END 2 ATK_END -1 DEF_END 3 COST_END 2 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 1 damage. <b>Combo:</b> Deal 2 instead.", "target": "class PerditionsBlade(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Perdition's Blade\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(1), CharacterSelector(None, picker=UserPicker())), combo=Battlecry(Damage(2), CharacterSelector(None, picker=UserPicker())))\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 2)\u00a7"}
{"source": "Pint-Sized Summoner NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END The first minion you play each turn costs (1) less.", "target": "class PintSizedSummoner(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Pint-Sized Summoner\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(TurnStarted(), ActionTag(GiveAura(AuraUntil(ManaChange(-1), CardSelector( condition=IsMinion()), MinionPlaced())), PlayerSelector()))])\u00a7"}
{"source": "Pit Lord NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Epic RARITY_END <b>Battlecry:</b> Deal 5 damage to your hero.", "target": "class PitLord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Pit Lord\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC, minion_type=MINION_TYPE.DEMON, battlecry=Battlecry(Damage(5), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 6)\u00a7"}
{"source": "Power Overwhelming NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a friendly minion +4/+4 until end of turn. Then, it dies. Horribly.", "target": "class PowerOverwhelming(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Power Overwhelming\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.add_effect(Effect(TurnEnded(), ActionTag(Kill(), SelfSelector())))\u00a7        self.target.change_attack(4)\u00a7        self.target.increase_health(4)\u00a7"}
{"source": "Priestess of Elune NAME_END 5 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 4 Health to your hero.", "target": "class PriestessOfElune(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Priestess of Elune\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Heal(4), HeroSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7"}
{"source": "Prophet Velen NAME_END 7 ATK_END 7 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Double the damage and healing of your spells and Hero Power.", "target": "class ProphetVelen(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Prophet Velen\", 7, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 7, auras=[Aura(MultiplySpellDamage(2), PlayerSelector()), Aura(MultiplyHealAmount(2), PlayerSelector())])\u00a7"}
{"source": "Pyroblast NAME_END -1 ATK_END -1 DEF_END 10 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal $10 damage.", "target": "class Pyroblast(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Pyroblast\", 10, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(10), self)\u00a7"}
{"source": "Questing Adventurer NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you play a card, gain +1/+1.", "target": "class QuestingAdventurer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Questing Adventurer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(CardPlayed(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\u00a7"}
{"source": "Raging Worgen NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Enrage:</b> <b>Windfury</b> and +1 Attack", "target": "class RagingWorgen(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Raging Worgen\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, enrage=[Aura(ChangeAttack(1), SelfSelector()), Aura(Windfury(), SelfSelector())])\u00a7"}
{"source": "Ragnaros the Firelord NAME_END 8 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END Can't attack. At the end of your turn, deal 8 damage to a random enemy.", "target": "class RagnarosTheFirelord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ragnaros the Firelord\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8, effects=[Effect(TurnEnded(), ActionTag(Damage(8), CharacterSelector(players=EnemyPlayer(), picker=RandomPicker())))], buffs=[Buff(CantAttack())])\u00a7"}
{"source": "Rampage NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Give a damaged minion +3/+3.", "target": "class Rampage(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rampage\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target, filter_func=lambda target: target.health != target.calculate_max_health() and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.change_attack(3)\u00a7        self.target.increase_health(3)\u00a7"}
{"source": "Ravenholdt Assassin NAME_END 7 ATK_END 5 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Stealth</b>", "target": "class RavenholdtAssassin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ravenholdt Assassin\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 5, stealth=True)\u00a7"}
{"source": "SI:7 Agent NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Combo:</b> Deal 2 damage.", "target": "class SI7Agent(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"SI:7 Agent\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, combo=Battlecry(Damage(2), CharacterSelector( players=BothPlayer(), picker=UserPicker()) ))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Savagery NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal damage equal to your hero's Attack to a minion.", "target": "class Savagery(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Savagery\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(player.hero.calculate_attack()), self)\u00a7"}
{"source": "Savannah Highmane NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Deathrattle:</b> Summon two 2/2 Hyenas.", "target": "class SavannahHighmane(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Savannah Highmane\", 6, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5, deathrattle=Deathrattle(Summon(Hyena(), 2), PlayerSelector()))\u00a7"}
{"source": "Scarlet Crusader NAME_END 3 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Divine Shield</b>", "target": "class ScarletCrusader(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Scarlet Crusader\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 1, divine_shield=True)\u00a7"}
{"source": "Scavenging Hyena NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END Whenever a friendly Beast dies, gain +2/+1.", "target": "class ScavengingHyena(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Scavenging Hyena\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, effects=[Effect(MinionDied(IsType(MINION_TYPE.BEAST)), ActionTag(Give(ChangeAttack(2)), SelfSelector())), Effect(MinionDied(IsType(MINION_TYPE.BEAST)), ActionTag(Give(ChangeHealth(1)), SelfSelector()))])\u00a7"}
{"source": "Sea Giant NAME_END 8 ATK_END 8 DEF_END 10 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END Costs (1) less for each other minion on the battlefield.", "target": "class SeaGiant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sea Giant\", 10, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, buffs=[Buff(ManaChange(Count(MinionSelector(None, BothPlayer())), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7"}
{"source": "Secretkeeper NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a <b>Secret</b> is played, gain +1/+1.", "target": "class Secretkeeper(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Secretkeeper\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(SpellCast(IsSecret(), BothPlayer()), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector()))])\u00a7"}
{"source": "Sense Demons NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Put 2 random Demons from your deck into your hand.", "target": "class SenseDemons(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sense Demons\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for i in range(0, 2):\u00a7            demon_card = game.random_draw(game.current_player.deck.cards, lambda c: not c.drawn and c.is_minion() and c.minion_type == MINION_TYPE.DEMON)\u00a7            if demon_card:\u00a7                demon_card.drawn = True\u00a7                player.deck.left -= 1\u00a7                if len(player.hand) < 10:\u00a7                    player.hand.append(demon_card)\u00a7                    demon_card.player = player\u00a7                    self.trigger(\"card_drawn\", demon_card)\u00a7                else:\u00a7                    player.trigger(\"card_destroyed\", demon_card)\u00a7            else:\u00a7                if len(player.hand) < 10:\u00a7                    player.hand.append(hearthbreaker.cards.minions.warlock.WorthlessImp())\u00a7                    player.hand[-1].player = player\u00a7                    self.trigger(\"card_drawn\", hearthbreaker.cards.minions.warlock.WorthlessImp())\u00a7"}
{"source": "Shadowflame NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a friendly minion and deal its Attack damage to all enemy minions.", "target": "class Shadowflame(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowflame\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        shadowflame_damage = self.target.calculate_attack()\u00a7        self.target.die(self)\u00a7        for minion in game.other_player.minions:\u00a7            minion.damage(player.effective_spell_damage(shadowflame_damage), self)\u00a7"}
{"source": "Shadowform NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Epic RARITY_END Your Hero Power becomes 'Deal 2 damage'. If already in Shadowform: 3 damage.", "target": "class Shadowform(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowform\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if type(player.hero.power) is not hearthbreaker.powers.MindShatter and type( player.hero.power) is not hearthbreaker.powers.MindSpike:\u00a7            player.hero.power = hearthbreaker.powers.MindSpike()\u00a7            player.hero.power.hero = player.hero\u00a7        elif type(player.hero.power) is hearthbreaker.powers.MindSpike:\u00a7            player.hero.power = hearthbreaker.powers.MindShatter()\u00a7            player.hero.power.hero = player.hero\u00a7"}
{"source": "Shadowstep NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Return a friendly minion to your hand. It costs (2) less.", "target": "class Shadowstep(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadowstep\", 0, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_friendly_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.bounce()\u00a7        self.target.card.add_buff(Buff(ManaChange(-3)))\u00a7"}
{"source": "Shield Slam NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Deal 1 damage to a minion for each Armor you have.", "target": "class ShieldSlam(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shield Slam\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(player.hero.armor), self)\u00a7"}
{"source": "Shieldbearer NAME_END 0 ATK_END 4 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class Shieldbearer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shieldbearer\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, taunt=True)\u00a7"}
{"source": "Silence NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Silence</b> a minion.", "target": "class Silence(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silence\", 0, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        self.target.silence()\u00a7"}
{"source": "Silver Hand Knight NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Summon a 2/2 Squire.", "target": "class SilverHandKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silver Hand Knight\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Summon(Squire()), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Silvermoon Guardian NAME_END 3 ATK_END 3 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Divine Shield</b>", "target": "class SilvermoonGuardian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silvermoon Guardian\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, divine_shield=True)\u00a7"}
{"source": "Snake NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class Snake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Snake\", 0, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Snake Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Secret:</b> When one of your minions is attacked, summon three 1/1 Snakes.", "target": "class SnakeTrap(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Snake Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.EPIC)\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if isinstance(target, Minion) and len(target.player.game.other_player.minions) < 7:\u00a7            snake = hearthbreaker.cards.minions.hunter.Snake()\u00a7            player = target.player.game.other_player\u00a7            for i in range(0, 3):\u00a7                snake.summon(player, player.game, len(player.minions))\u00a7            super().reveal()\u00a7"}
{"source": "Snipe NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your opponent plays a minion, deal $4 damage to it.", "target": "class Snipe(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Snipe\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"minion_played\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"minion_played\", self._reveal)\u00a7\u00a7    def _reveal(self, minion):\u00a7        minion.damage(4, None)\u00a7        super().reveal()\u00a7"}
{"source": "Sorcerer's Apprentice NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Your spells cost (1) less.", "target": "class SorcerersApprentice(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sorcerer's Apprentice\", 2, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, auras=[Aura(ManaChange(-1), CardSelector(condition=IsSpell()))])\u00a7"}
{"source": "Soul of the Forest NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions \"<b>Deathrattle:</b> Summon a 2/2 Treant.\"", "target": "class SoulOfTheForest(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Soul of the Forest\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.druid import Treant\u00a7        for minion in player.minions:\u00a7            minion.deathrattle.append(Deathrattle(Summon(Treant()), PlayerSelector()))\u00a7"}
{"source": "Southsea Captain NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Epic RARITY_END Your other Pirates have +1/+1.", "target": "class SouthseaCaptain(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Southsea Captain\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.PIRATE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, auras=[Aura(ChangeAttack(1), MinionSelector(IsType(MINION_TYPE.PIRATE))), Aura(ChangeHealth(1), MinionSelector(IsType(MINION_TYPE.PIRATE)))])\u00a7"}
{"source": "Southsea Deckhand NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Pirate RACE_END Common RARITY_END Has <b>Charge</b> while you have a weapon equipped.", "target": "class SouthseaDeckhand(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Southsea Deckhand\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.PIRATE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, buffs=[Buff(Charge(), GreaterThan(Count(WeaponSelector()), value=0))])\u00a7"}
{"source": "Spellbender NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Secret:</b> When an enemy casts a spell on a minion, summon a 1/3 as the new target.", "target": "class Spellbender(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spellbender\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, card, index):\u00a7        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():\u00a7            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))\u00a7            card.target = self.player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"card_played\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"card_played\", self._reveal)\u00a7        self.player = None\u00a7"}
{"source": "Spirit Wolf NAME_END 2 ATK_END 3 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b>", "target": "class SpiritWolf(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spirit Wolf\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, False)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(2, 3, taunt=True)\u00a7"}
{"source": "Spiteful Smith NAME_END 4 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Enrage:</b> Your weapon has +2 Attack.", "target": "class SpitefulSmith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spiteful Smith\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 6, enrage=[Aura(ChangeAttack(2), WeaponSelector())])\u00a7"}
{"source": "Squire NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class Squire(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Squire\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Squirrel NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class Squirrel(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Squirrel\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Stampeding Kodo NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Battlecry:</b> Destroy a random enemy minion with 2 or less Attack.", "target": "class StampedingKodo(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stampeding Kodo\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=Battlecry(Kill(), MinionSelector(AttackLessThanOrEqualTo(2), EnemyPlayer(), RandomPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5)\u00a7"}
{"source": "Starfall NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Choose One -</b> Deal $5 damage to a minion; or $2 damage to all enemy minions.", "target": "class Starfall(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Starfall\", 5, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) > 0\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        option = player.agent.choose_option([DamageAll(), DamageOne()], player)\u00a7        option.use(player, game)\u00a7"}
{"source": "Stormforged Axe NAME_END 2 ATK_END -1 DEF_END 2 COST_END 3 DUR_END Weapon TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Overload:</b> (1)", "target": "class StormforgedAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormforged Axe\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=1)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(2, 3)\u00a7"}
{"source": "Stranglethorn Tiger NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Stealth</b>", "target": "class StranglethornTiger(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stranglethorn Tiger\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, stealth=True)\u00a7"}
{"source": "Sunwalker NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b> NL <b>Divine Shield</b>", "target": "class Sunwalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sunwalker\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, divine_shield=True, taunt=True)\u00a7"}
{"source": "Sword of Justice NAME_END 1 ATK_END -1 DEF_END 3 COST_END 5 DUR_END Weapon TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Epic RARITY_END Whenever you summon a minion, give it +1/+1 and this loses 1 Durability.", "target": "class SwordOfJustice(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sword of Justice\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 5, effects=[Effect(MinionSummoned(), ActionTag(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), TargetSelector())), Effect(MinionSummoned(), ActionTag(DecreaseDurability(), WeaponSelector()))])\u00a7"}
{"source": "Sylvanas Windrunner NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> Take control of a random enemy minion.", "target": "class SylvanasWindrunner(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sylvanas Windrunner\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, deathrattle=Deathrattle(Steal(), MinionSelector(players=EnemyPlayer(), picker=RandomPicker())))\u00a7"}
{"source": "Tauren Warrior NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>. <b>Enrage:</b> +3 Attack", "target": "class TaurenWarrior(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tauren Warrior\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, taunt=True, enrage=[Aura(ChangeAttack(3), SelfSelector())])\u00a7"}
{"source": "Temple Enforcer NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Give a friendly minion +3 Health.", "target": "class TempleEnforcer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Temple Enforcer\", 6, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON, battlecry=Battlecry(Give(ChangeHealth(3)), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7"}
{"source": "The Beast NAME_END 9 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END <b>Deathrattle:</b> Summon a 3/3 Finkle Einhorn for your opponent.", "target": "class TheBeast(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"The Beast\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, deathrattle=Deathrattle(Summon(FinkleEinhorn()), PlayerSelector(EnemyPlayer())))\u00a7"}
{"source": "The Black Knight NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Destroy an enemy minion with <b>Taunt</b>.", "target": "class TheBlackKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"The Black Knight\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=Battlecry(Kill(), MinionSelector(HasStatus(\"taunt\"), EnemyPlayer(), UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7"}
{"source": "Thoughtsteal NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Common RARITY_END Copy 2 cards from your opponent's deck and put them into your hand.", "target": "class Thoughtsteal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Thoughtsteal\", 3, CHARACTER_CLASS.PRIEST, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(0, 2):\u00a7            new_card = game.random_draw(game.other_player.deck.cards, lambda c: not c.drawn)\u00a7            if new_card:\u00a7                new_card = copy.copy(new_card)\u00a7                new_card.drawn = True\u00a7                if len(player.hand) < 10:\u00a7                    player.hand.append(new_card)\u00a7                    new_card.player = player\u00a7                    self.trigger(\"card_drawn\", new_card)\u00a7                else:\u00a7                    player.trigger(\"card_destroyed\", new_card)\u00a7"}
{"source": "Tirion Fordring NAME_END 6 ATK_END 6 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Divine Shield</b>. <b>Taunt</b>. <b>Deathrattle:</b> Equip a 5/3 Ashbringer.", "target": "class TirionFordring(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Tirion Fordring\", 8, CHARACTER_CLASS.PALADIN, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6, divine_shield=True, taunt=True, deathrattle=Deathrattle(Equip(Ashbringer()), PlayerSelector()))\u00a7"}
{"source": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b>. At the end of the turn, destroy this minion.", "target": "class Treant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Treant\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class Treant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Treant\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Treant NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "target": "class Treant(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Treant\", 1, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, _):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Twilight Drake NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b>Battlecry:</b> Gain +1 Health for each card in your hand.", "target": "class TwilightDrake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Twilight Drake\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(Give(Buff(ChangeHealth(Count(CardSelector())))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 1)\u00a7"}
{"source": "Twisting Nether NAME_END -1 ATK_END -1 DEF_END 8 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions.", "target": "class TwistingNether(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Twisting Nether\", 8, CHARACTER_CLASS.WARLOCK, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        for minion in targets:\u00a7            minion.die(self)\u00a7"}
{"source": "Unbound Elemental NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever you play a card with <b>Overload</b>, gain +1/+1.", "target": "class UnboundElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Unbound Elemental\", 3, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(CardPlayed(HasOverload()), ActionTag(Give(ChangeAttack(1)), SelfSelector())), Effect(CardPlayed(HasOverload()), ActionTag(Give(ChangeHealth(1)), SelfSelector()))])\u00a7"}
{"source": "Unleash the Hounds NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END For each enemy minion, summon a 1/1 Hound with <b>Charge</b>.", "target": "class UnleashTheHounds(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Unleash the Hounds\", 3, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        for target in hearthbreaker.targeting.find_enemy_minion_spell_target(player.game, lambda x: True):\u00a7            hound = hearthbreaker.cards.minions.hunter.Hound()\u00a7            hound.summon(player, game, len(player.minions))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(game.other_player.minions) >= 1 and len(player.minions) < 7\u00a7"}
{"source": "Venture Co. Mercenary NAME_END 7 ATK_END 6 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (3) more.", "target": "class VentureCoMercenary(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Venture Co. Mercenary\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 6, auras=[Aura(ManaChange(3), CardSelector(condition=IsMinion()))])\u00a7"}
{"source": "Violet Apprentice NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class VioletApprentice(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Violet Apprentice\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Violet Teacher NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever you cast a spell, summon a 1/1 Violet Apprentice.", "target": "class VioletTeacher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Violet Teacher\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(SpellCast(), ActionTag(Summon(VioletApprentice()), PlayerSelector()))])\u00a7"}
{"source": "Void Terror NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b>Battlecry:</b> Destroy the minions on either side of this minion and gain their Attack and Health.", "target": "class VoidTerror(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Void Terror\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON, battlecry=(Battlecry( Give([Buff(ChangeHealth(Attribute(\"health\", MinionSelector(Adjacent())))), Buff(ChangeAttack(Attribute(\"attack\", MinionSelector(Adjacent()))))]), SelfSelector()), Battlecry(Kill(), MinionSelector(Adjacent()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "target": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "target": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Wild Pyromancer NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 1 damage to ALL minions.", "target": "class WildPyromancer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wild Pyromancer\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2, effects=[Effect(CardUsed(IsSpell()), ActionTag(Damage(1), MinionSelector(condition=None, players=BothPlayer())))])\u00a7"}
{"source": "Windfury Harpy NAME_END 4 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Windfury</b>", "target": "class WindfuryHarpy(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Windfury Harpy\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5, windfury=True)\u00a7"}
{"source": "Worthless Imp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <i>You are out of demons! At least there are always imps...</i>", "target": "class WorthlessImp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Worthless Imp\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False, MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Wrath NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Deal $3 damage to a minion; or $1 damage and draw a card.", "target": "class Wrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wrath\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        class WrathOne(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Wrath 1 Damage\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7            def use(self, player, game):\u00a7                target.damage(player.effective_spell_damage(1), wrath)\u00a7                player.draw()\u00a7\u00a7        class WrathThree(ChoiceCard):\u00a7            def __init__(self):\u00a7                super().__init__(\"Wrath 3 Damage\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, False, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7            def use(self, player, game):\u00a7                target.damage(player.effective_spell_damage(3), wrath)\u00a7\u00a7        super().use(player, game)\u00a7        option = game.current_player.agent.choose_option([WrathOne(), WrathThree()], player)\u00a7        target = self.target\u00a7        wrath = self\u00a7        option.use(player, game)\u00a7"}
{"source": "Young Dragonhawk NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Windfury</b>", "target": "class YoungDragonhawk(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Young Dragonhawk\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1, windfury=True)\u00a7"}
{"source": "Young Priestess NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END At the end of your turn, give another random friendly minion +1 Health.", "target": "class YoungPriestess(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Young Priestess\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1, effects=[Effect(TurnEnded(), ActionTag(Give(ChangeHealth(1)), MinionSelector(picker=RandomPicker())))])\u00a7"}
{"source": "Youthful Brewmaster NAME_END 3 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Return a friendly minion from the battlefield to your hand.", "target": "class YouthfulBrewmaster(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Youthful Brewmaster\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=Battlecry(Bounce(), MinionSelector(picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": "Ysera NAME_END 4 ATK_END 12 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END At the end of your turn, add a Dream Card to your hand.", "target": "class Ysera(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ysera\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 12, effects=[Effect(TurnEnded(), ActionTag(AddCard(CardList([EmeraldDrake(), LaughingSister(), Nightmare(), YseraAwakens(), Dream()])), PlayerSelector()))])\u00a7"}
{"source": "Ysera Awakens NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Dream PLAYER_CLS_END NIL RACE_END NIL RARITY_END Deal $5 damage to all characters except Ysera.", "target": "class YseraAwakens(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Ysera Awakens\", 2, CHARACTER_CLASS.DREAM, CARD_RARITY.COMMON, False)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(player.game.other_player.minions)\u00a7        targets.extend(player.game.current_player.minions)\u00a7        targets.append(player.game.other_player.hero)\u00a7        targets.append(player.game.current_player.hero)\u00a7        targets = filter(lambda m: not m.is_minion() or m.card.name != \"Ysera\", targets)\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(5), self)\u00a7"}
{"source": "Axe Flinger NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever this minion takes damage, deal 2 damage to the enemy hero.", "target": "class AxeFlinger(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Axe Flinger\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, effects=[Effect(Damaged(), ActionTag(Damage(2), HeroSelector(EnemyPlayer())))])\u00a7"}
{"source": "Blackwing Technician NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> If you're holding a Dragon, gain +1/+1.", "target": "class BlackwingTechnician(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blackwing Technician\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4)\u00a7"}
{"source": "Chromaggus NAME_END 6 ATK_END 8 DEF_END 8 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END Whenever you draw a card, put another copy into your hand.", "target": "class Chromaggus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Chromaggus\", 8, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 8, effects=[Effect(CardDrawn(), [ActionTag(AddCard(Same()), PlayerSelector())])])\u00a7"}
{"source": "Core Rager NAME_END 4 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Hunter PLAYER_CLS_END Beast RACE_END Rare RARITY_END <b>Battlecry:</b> If your hand is empty, gain +3/+3.", "target": "class CoreRager(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Core Rager\", 4, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE, minion_type=MINION_TYPE.BEAST, battlecry=(Battlecry(Give([Buff(ChangeAttack(3)), Buff(ChangeHealth(3))]), SelfSelector(), Not(GreaterThan(Count(CardSelector()), value=0)))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4)\u00a7"}
{"source": "Dark Iron Skulker NAME_END 4 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 2 damage to all undamaged enemy minions.", "target": "class DarkIronSkulker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dark Iron Skulker\", 5, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE, battlecry=Battlecry(Damage(2), MinionSelector(condition=Not(IsDamaged()), players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": "Demonwrath NAME_END -1 ATK_END -1 DEF_END 3 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage to all non-Demon minions.", "target": "class Demonwrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Demonwrath\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        for minion in targets:\u00a7            if minion.card.minion_type is not MINION_TYPE.DEMON:\u00a7                minion.damage(player.effective_spell_damage(2), self)\u00a7"}
{"source": "Dragon Consort NAME_END 5 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END Dragon RACE_END Rare RARITY_END <b>Battlecry:</b> The next Dragon you play costs (2) less.", "target": "class DragonConsort(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragon Consort\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-3), CardSelector(condition=IsType(MINION_TYPE.DRAGON)), CardPlayed(IsType(MINION_TYPE.DRAGON)), False)]), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5)\u00a7"}
{"source": "Dragon Egg NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion takes damage, summon a 2/1 Whelp.", "target": "class DragonEgg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragon Egg\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, effects=[Effect(Damaged(), ActionTag(Summon(BlackWhelp()), PlayerSelector()))])\u00a7"}
{"source": "Dragon's Breath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $4 damage. Costs (1) less for each minion that died this turn.", "target": "class DragonsBreath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragon's Breath\", 5, CHARACTER_CLASS.MAGE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(player.effective_spell_damage(4), self)\u00a7"}
{"source": "Druid of the Flame NAME_END 5 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class DruidOfTheFlame(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Flame\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),\u00a7            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Druid of the Flame NAME_END 2 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Transform into a 5/2 minion; or a 2/5 minion.", "target": "class DruidOfTheFlame(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Flame\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),\u00a7            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Druid of the Flame NAME_END 2 ATK_END 5 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END Beast RACE_END Common RARITY_END NIL", "target": "class DruidOfTheFlame(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Druid of the Flame\", 3, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON, choices=[\u00a7            Choice(FlameCatForm(), Transform(FlameCat()), SelfSelector()),\u00a7            Choice(FlameBirdForm(), Transform(FlameBird()), SelfSelector())\u00a7        ])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2)\u00a7"}
{"source": "Emperor Thaurissan NAME_END 5 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END At the end of your turn, reduce the Cost of cards in your hand by (1).", "target": "class EmperorThaurissan(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Emperor Thaurissan\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 5, effects=[Effect(TurnEnded(), [ActionTag(Give(Buff(ManaChange(-1))), CardSelector())])])\u00a7"}
{"source": "Fireguard Destroyer NAME_END 3 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Gain 1-4 Attack. <b>Overload:</b> (1)", "target": "class FireguardDestroyer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fireguard Destroyer\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.COMMON, overload=1, battlecry=Battlecry(Give(Buff(ChangeAttack(RandomAmount(1, 4)))), SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 6)\u00a7"}
{"source": "Flamewaker NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END After you cast a spell, deal 2 damage randomly split among all enemies.", "target": "class Flamewaker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flamewaker\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(CardUsed(IsSpell()), ActionTag(Damage(1), CharacterSelector(None, EnemyPlayer(), RandomPicker(2))))])\u00a7"}
{"source": "Gang Up NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Choose a minion. Shuffle 3 copies of it into your deck.", "target": "class GangUp(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gang Up\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for i in range(3):\u00a7            player.put_back(type(self.target.card)())\u00a7"}
{"source": "Grim Patron NAME_END 3 ATK_END 3 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever this minion survives damage, summon another Grim Patron.", "target": "class GrimPatron(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Grim Patron\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3, effects=[Effect(Damaged(), [ActionTag(Summon(GrimPatron()), PlayerSelector(), GreaterThan(Attribute(\"health\", SelfSelector()), value=0))])])\u00a7"}
{"source": "Imp Gang Boss NAME_END 2 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever this minion takes damage, summon a 1/1 Imp.", "target": "class ImpGangBoss(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Imp Gang Boss\", 3, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 4, effects=[Effect(Damaged(), ActionTag(Summon(Imp()), PlayerSelector()))])\u00a7"}
{"source": "Lava Shock NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $2 damage. NL Unlock your <b>Overloaded</b> Mana Crystals.", "target": "class LavaShock(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lava Shock\", 2, CHARACTER_CLASS.SHAMAN, CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(2, self)\u00a7        player.upcoming_overload = 0\u00a7        player.mana += player.current_overload\u00a7        player.current_overload = 0\u00a7"}
{"source": "Majordomo Executus NAME_END 9 ATK_END 7 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Deathrattle:</b> Replace your hero with Ragnaros, the Firelord.", "target": "class MajordomoExecutus(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Majordomo Executus\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(9, 7, deathrattle=[Deathrattle(Transform(Ragnaros()), HeroSelector())])\u00a7"}
{"source": "Nefarian NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Add 2 random spells to your hand <i>(from your opponent's class)</i>.", "target": "class Nefarian(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Nefarian\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON, battlecry=Battlecry(AddCard(CollectionSource([ IsClass(Attribute(\"character_class\", HeroSelector(EnemyPlayer()))), IsSpell() ]), 2), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7"}
{"source": "Quick Shot NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $3 damage. NL If your hand is empty, draw a card.", "target": "class QuickShot(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Quick Shot\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.damage(3, self)\u00a7        if len(player.hand) == 0:\u00a7            player.draw()\u00a7"}
{"source": "Rend Blackhand NAME_END 8 ATK_END 4 DEF_END 7 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> If you're holding a Dragon, destroy a <b>Legendary</b> minion.", "target": "class RendBlackhand(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Rend Blackhand\", 7, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, battlecry=(Battlecry(Kill(), MinionSelector(And(MinionIsNotTarget(), IsRarity(CARD_RARITY.LEGENDARY)), BothPlayer(), UserPicker()), GreaterThan(Count(CardSelector(condition=IsType(MINION_TYPE.DRAGON))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 4)\u00a7"}
{"source": "Resurrect NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Summon a random friendly minion that died this game.", "target": "class Resurrect(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Resurrect\", 2, CHARACTER_CLASS.PRIEST, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        from hearthbreaker.engine import card_lookup\u00a7        super().use(player, game)\u00a7        if len(player.graveyard) > 0 and len(player.minions) < 7:\u00a7            card_name = game.random_choice(player.graveyard)\u00a7            card = card_lookup(card_name)\u00a7            card.summon(player, game, len(player.minions))\u00a7"}
{"source": "Revenge NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END Deal $1 damage to all minions. If you have 12 or less Health, deal $3 damage instead.", "target": "class Revenge(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Revenge\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        if player.hero.health <= 12:\u00a7            for minion in targets:\u00a7                minion.damage(player.effective_spell_damage(3), self)\u00a7        else:\u00a7            for minion in targets:\u00a7                minion.damage(player.effective_spell_damage(1), self)\u00a7"}
{"source": "Volcanic Drake NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Costs (1) less for each minion that died this turn.", "target": "class VolcanicDrake(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Volcanic Drake\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 4)\u00a7"}
{"source": "Volcanic Lumberer NAME_END 7 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Druid PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt</b> NL Costs (1) less for each minion that died this turn.", "target": "class VolcanicLumberer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Volcanic Lumberer\", 9, CHARACTER_CLASS.DRUID, CARD_RARITY.RARE, buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 8, taunt=True)\u00a7"}
{"source": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "target": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Whelp NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": "Whelp NAME_END 2 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END NIL RARITY_END NIL", "target": "class Whelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}