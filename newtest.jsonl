{"source": 	"Archmage NAME_END 4 ATK_END 7 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Spell Damage +1</b>", "target": "class Archmage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Archmage\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 7, spell_damage=1)\u00a7"}
{"source": 	"Booty Bay Bodyguard NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Taunt</b>", "target": "class BootyBayBodyguard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Booty Bay Bodyguard\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4, taunt=True)\u00a7"}
{"source": 	"Darkscale Healer NAME_END 4 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Restore 2 Health to all friendly characters.", "target": "class DarkscaleHealer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Darkscale Healer\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         battlecry=Battlecry(Heal(2), CharacterSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7"}
{"source": 	"Fiery War Axe NAME_END 3 ATK_END -1 DEF_END 2 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "target": "class FieryWarAxe(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Fiery War Axe\", 2, CHARACTER_CLASS.WARRIOR, CARD_RARITY.FREE)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(3, 2)\u00a7"}
{"source": 	"Frostwolf Warlord NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> Gain +1/+1 for each other friendly minion on the battlefield.", "target": "class FrostwolfWarlord(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Frostwolf Warlord\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         battlecry=Battlecry(Give([Buff(ChangeAttack(Count(MinionSelector()))),\u00a7                                                   Buff(ChangeHealth(Count(MinionSelector())))]),\u00a7                                             SelfSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7	return Minion(4, 4)\u00a7"}
{"source": 	"Hellfire NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Free RARITY_END Deal $3 damage to ALL characters.", "target": "class Hellfire(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hellfire\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        targets = copy.copy(game.other_player.minions)\u00a7        targets.extend(game.current_player.minions)\u00a7        targets.append(game.other_player.hero)\u00a7        targets.append(game.current_player.hero)\u00a7        for minion in targets:\u00a7            minion.damage(player.effective_spell_damage(3), sel	f)\u00a7"}
{"source": 	"Innervate NAME_END -1 ATK_END -1 DEF_END 0 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Free RARITY_END Gain 2 Mana Crystals this turn only.", "target": "class Innervate(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Innervate\", 0, CHARACTER_CLASS.DRUID, CARD_RARITY.FREE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if player.mana < 8:\u00a7            player.mana += 2\u00a7        else:\u00a7            player.mana = 10\u00a7"}
{"source": 	"Magma Rager NAME_END 5 ATK_END 1 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END NIL", "target": "class MagmaRager(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Magma Rager\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.FREE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 1)\u00a7"}
{"source": 	"Mortal Coil NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Deal $1 damage to a minion. If that kills it, draw a card.", "target": "class MortalCoil(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mortal Coil\", 1, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON,\u00a7                         target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        if self.target.health <= player.effective_spell_damage(1) and not self.target.divine_shield:\u00a7            self.target.damage(player.effective_spell_damage(1), self)\u00a7	player.draw()\u00a7        else:\u00a7            self.target.damage(player.effective_spell_damage(1), self)\u00a7            # not sure how necessary this is, making sure damage before\u00a7            # draw but need to compare health before dealing damage\u00a7"}
{"source": 	"Polymorph NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Free RARITY_END Transform a minion into a 1/1 Sheep.", "target": "class Polymorph(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Polymorph\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.FREE,\u00a7                         target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.minions.mage import Sheep\u00a7        sheep = Sheep()\u00a7        minion = sheep.create_minion(None)\u00a7        minion.card = sheep\u00a7        self.target.replace(minion)\u00a7"}
{"source": 	"Searing Totem NAME_END 1 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END NIL", "target": "class SearingTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Searing Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": 	"Silverback Patriarch NAME_END 1 ATK_END 4 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Common RARITY_END <b>Taunt</b>", "target": "class SilverbackPatriarch(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Silverback Patriarch\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 4, taunt=True)\u00a7"}
{"source": 	"Stormwind Knight NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Charge</b>", "target": "class StormwindKnight(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Stormwind Knight\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, charge=True)\u00a7"}
{"source": 	"Voodoo Doctor NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Free RARITY_END <b>Battlecry:</b> Restore 2 Health.", "target": "class VoodooDoctor(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voodoo Doctor\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.FREE,\u00a7                         battlecry=Battlecry(Heal(2), CharacterSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": 	"Wrath of Air Totem NAME_END 0 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Totem RACE_END Free RARITY_END <b>Spell Damage +1</b>", "target": "class WrathOfAirTotem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wrath of Air Totem\", 1, CHARACTER_CLASS.SHAMAN, CARD_RARITY.FREE, False, MINION_TYPE.TOTEM)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 2, spell_damage=1)\u00a7"}
{"source": 	"Astral Communion NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Epic RARITY_END Gain 10 Mana Crystals. Discard your hand.", "target": "class AstralCommunion(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Astral Communion\", 4, CHARACTER_CLASS.DRUID, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for card in player.hand:\u00a7            card.unattach()\u00a7            player.trigger(\"card_discarded\", card)\u00a7        player.hand = []\u00a7        player.max_mana = 10\u00a7        player.mana = 1"}
{"source": 	"Annoy-o-Tron NAME_END 1 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Common RARITY_END <b>Taunt</b> NL <b>Divine Shield</b>", "target": "class AnnoyoTron(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Annoy-o-Tron\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, divine_shield=True, taunt=True)\u00a7"}
{"source": 	"Burly Rockjaw Trogg NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END Whenever your opponent casts a spell, gain +2 Attack.", "target": "class BurlyRockjawTrogg(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Burly Rockjaw Trogg\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(SpellCast(player=EnemyPlayer()), ActionTag(Give(ChangeAttack(2)),\u00a7                                                                                       SelfSelector()))])\u00a7"}
{"source": 	"Cogmaster's Wrench NAME_END 1 ATK_END -1 DEF_END 3 COST_END 3 DUR_END Weapon TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Epic RARITY_END Has +2 Attack while you have a Mech.", "target": "class CogmastersWrench(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Cogmaster's Wrench\", 3, CHARACTER_CLASS.ROGUE, CARD_RARITY.EPIC)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(1, 3, buffs=[Buff(ChangeAttack(2), GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))),\u00a7                                                                     value=0))]"}
{"source": 	"Echo of Medivh NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END Put a copy of each friendly minion into your hand.", "target": "class EchoOfMedivh(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Echo of Medivh\", 4, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in sorted(copy.copy(player.minions), key=lambda minion: minion.born):\u00a7            if len(player.hand) < 10:\u00a7                player.hand.append(minion.card)\u00a7"}
{"source": 	"Floating Watcher NAME_END 4 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END Whenever your hero takes damage on your turn, gain +2/+2.", "target": "class FloatingWatcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Floating Watcher\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON,\u00a7                         minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 4, effects=[Effect(CharacterDamaged(And(IsHero(), OwnersTurn())),\u00a7                                            ActionTag(Give([Buff(ChangeAttack(2)), Buff(ChangeHealth(2))]),\u00a7	SelfSelector()))])\u00a7"}
{"source": 	"Gnomish Experimenter NAME_END 3 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Draw a card. If it's a minion, transform it into a Chicken.", "target": "class GnomishExperimenter(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnomish Experimenter\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\u00a7                         battlecry=(Battlecry(Draw(), PlayerSelector()), Battlecry(Transform(GnomishChicken()),\u00a7                                                                                   LastDrawnSelector(),\u00a7	Matches(LastDrawnSelector(),\u00a7                                                                                           IsMinion()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 2)\u00a7"}
{"source": 	"Iron Juggernaut NAME_END 6 ATK_END 5 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warrior PLAYER_CLS_END Mech RACE_END Legendary RARITY_END <b>Battlecry:</b> Shuffle a Mine into your opponent's deck. When drawn, it explodes for 10 damage.", "target": "class IronJuggernaut(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Iron Juggernaut\", 6, CHARACTER_CLASS.WARRIOR, CARD_RARITY.LEGENDARY,\u00a7                         minion_type=MINION_TYPE.MECH,\u00a7                         battlecry=Battlecry(AddCard(BurrowingMine(), add_to_deck=True), PlayerSelector(EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 5)\u00a7"}
{"source": 	"Madder Bomber NAME_END 5 ATK_END 4 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> Deal 6 damage randomly split between all other characters.", "target": "class MadderBomber(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Madder Bomber\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\u00a7                         battlecry=Battlecry(Damage(1), CharacterSelector(players=BothPlayer(),\u00a7                                                                          picker=RandomPicker(6))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 4)\u00a7"}
{"source": 	"Mini-Mage NAME_END 4 ATK_END 1 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Stealth</b> NL <b>Spell Damage +1</b>", "target": "class MiniMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mini-Mage\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 1, stealth=True, spell_damage=1)\u00a7"}
{"source": 	"Piloted Sky Golem NAME_END 6 ATK_END 4 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Mech RACE_END Epic RARITY_END <b>Deathrattle:</b> Summon a random 4-Cost minion.", "target": "class PilotedSkyGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Piloted Sky Golem\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.EPIC, minion_type=MINION_TYPE.MECH)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 4, deathrattle=Deathrattle(Summon(CollectionSource([ManaCost(4), IsMinion()])),\u00a7                                                    PlayerSelector()))\u00a7"}
{"source": 	"Scarlet Purifier NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry</b>: Deal 2 damage to all minions with <b>Deathrattle</b>.", "target": "class ScarletPurifier(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Scarlet Purifier\", 3, CHARACTER_CLASS.PALADIN, CARD_RARITY.RARE,\u00a7                         battlecry=Battlecry(Damage(2), MinionSelector(MinionHasDeathrattle(), BothPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": 	"Siltfin Spiritwalker NAME_END 2 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END Murloc RACE_END Epic RARITY_END Whenever another friendly Murloc dies, draw a card. <b>Overload</b>: (1)", "target": "class SiltfinSpiritwalker(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Siltfin Spiritwalker\", 4, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC,\u00a7                         minion_type=MINION_TYPE.MURLOC, overload=1)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 5, effects=[Effect(MinionDied(IsType(MINION_TYPE.MURLOC)),\u00a7                                            ActionTag(Draw(), PlayerSelector()))])\u00a7"}
{"source": 	"Tinkertown Technician NAME_END 3 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Battlecry:</b> If you have a Mech, gain +1/+1 and add a <b>Spare Part</b> to your hand.", "target": "class TinkertownTechnician(MinionCard):\u00a7    def __init__(self):\u00a7        from hearthbreaker.cards.spells.neutral import spare_part_list\u00a7        super().__init__(\"Tinkertown Technician\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         battlecry=(Battlecry(Give([Buff(ChangeAttack(1)), Buff(ChangeHealth(1))]), SelfSelector(),\u00a7                                              GreaterThan(Count(MinionSelector(IsType(MIN	ION_TYPE.MECH))), value=0)),\u00a7                                    Battlecry(AddCard(CardList(spare_part_list)), PlayerSelector(),\u00a7                                              GreaterThan(Count(MinionSelector(IsType(MINION_TYPE.MECH))), value=0))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 3)\u00a7"}
{"source": 	"Vol'jin NAME_END 6 ATK_END 2 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Priest PLAYER_CLS_END NIL RACE_END Legendary RARITY_END <b>Battlecry:</b> Swap Health with another minion.", "target": "class Voljin(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Vol'jin\", 5, CHARACTER_CLASS.PRIEST, CARD_RARITY.LEGENDARY,\u00a7                         battlecry=Battlecry(SwapStats(\"health\", \"health\", True), MinionSelector(players=BothPlayer(),\u00a7                                                                                                 picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 2)\u00a7"}
{"source": 	"Death's Bite NAME_END 4 ATK_END -1 DEF_END 4 COST_END 2 DUR_END Weapon TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Deathrattle:</b> Deal 1 damage to all minions.", "target": "class DeathsBite(WeaponCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Death's Bite\", 4, CHARACTER_CLASS.WARRIOR, CARD_RARITY.COMMON)\u00a7\u00a7    def create_weapon(self, player):\u00a7        return Weapon(4, 2, deathrattle=Deathrattle(Damage(1), MinionSelector(players=BothPlayer())))\u00a7"}
{"source": 	"Maexxna NAME_END 2 ATK_END 8 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Beast RACE_END Legendary RARITY_END Destroy any minion damaged by this minion.", "target": "class Maexxna(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Maexxna\", 6, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.BEAST)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 8, effects=[Effect(DidDamage(), ActionTag(Kill(), TargetSelector(IsMinion())))])\u00a7"}
{"source": 	"Sludge Belcher NAME_END 3 ATK_END 5 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Taunt. NL Deathrattle:</b> Summon a 1/2 Slime with <b>Taunt</b>.", "target": "class SludgeBelcher(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Sludge Belcher\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, taunt=True, deathrattle=Deathrattle(Summon(Slime()), PlayerSelector()))\u00a7"}
{"source": 	"Voidcaller NAME_END 3 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END <b>Deathrattle:</b> Put a random Demon from your hand into the battlefield.", "target": "class Voidcaller(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Voidcaller\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 4, deathrattle=Deathrattle(Summon(HandSource(FriendlyPlayer(), [IsType(MINION_TYPE.DEMON)])),\u00a7                                                    PlayerSelector()))\u00a7"}
{"source": 	"Alexstrasza NAME_END 8 ATK_END 8 DEF_END 9 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Legendary RARITY_END <b>Battlecry:</b> Set a hero's remaining Health to 15.", "target": "class Alexstrasza(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Alexstrasza\", 9, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, minion_type=MINION_TYPE.DRAGON,\u00a7                         battlecry=Battlecry(SetHealth(15), HeroSelector(players=BothPlayer(), picker=UserPicker())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(8, 8)\u00a7"}
{"source": 	"Arcane Golem NAME_END 4 ATK_END 2 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Charge</b>. <b>Battlecry:</b> Give your opponent a Mana Crystal.", "target": "class ArcaneGolem(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Arcane Golem\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.RARE,\u00a7                         battlecry=Battlecry(GiveManaCrystal(), PlayerSelector(players=EnemyPlayer())))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 2, charge=True)\u00a7"}
{"source": 	"Baine Bloodhoof NAME_END 4 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Legendary RARITY_END NIL", "target": "class BaineBloodhoof(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Baine Bloodhoof\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.LEGENDARY, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 5)\u00a7"}
{"source": 	"Blade Flurry NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy your weapon and deal its damage to all enemies.", "target": "class BladeFlurry(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Blade Flurry\", 2, CHARACTER_CLASS.ROGUE, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        if player.weapon is not None:\u00a7            # Yes, this card is affected by spell damage cards.\u00a7            # Source: http://www.hearthhead.com/card=1064/blade-flurry#comments:id=1927317\u00a7            attack_power = player.effective_spell_damage(player.hero.calcul	ate_attack())\u00a7            player.weapon.destroy()\u00a7\u00a7            for minion in copy.copy(game.other_player.minions):\u00a7                minion.damage(attack_power, self)\u00a7\u00a7            game.other_player.hero.damage(attack_power, self)\u00a7"}
{"source": 	"Brawl NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Epic RARITY_END Destroy all minions except one. <i>(chosen randomly)</i>", "target": "class Brawl(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Brawl\", 5, CHARACTER_CLASS.WARRIOR, CARD_RARITY.EPIC)\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) + len(player.opponent.minions) >= 2\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        minions = copy.copy(player.minions)\u00a7        minions.extend(game.other_player.minions)\u00a7\u00a7        if len(minions) > 1:\u00a7	survivor = game.random_choice(minions)\u00a7            for minion in minions:\u00a7                if minion is not survivor:\u00a7                    minion.die(self)\u00a7"}
{"source": 	"Conceal NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Rogue PLAYER_CLS_END NIL RACE_END Common RARITY_END Give your minions <b>Stealth</b> until your next turn.", "target": "class Conceal(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Conceal\", 1, CHARACTER_CLASS.ROGUE, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for minion in player.minions:\u00a7            if not minion.stealth:\u00a7                minion.add_buff(BuffUntil(Stealth(), TurnStarted()))\u00a7"}
{"source": 	"Defender NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class DefenderMinion(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Defender\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, p):\u00a7        return Minion(2, 1)\u00a7"}
{"source": 	"Doomguard NAME_END 5 ATK_END 7 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Rare RARITY_END <b>Charge</b>. <b>Battlecry:</b> Discard two random cards.", "target": "class Doomguard(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Doomguard\", 5, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE, minion_type=MINION_TYPE.DEMON,\u00a7                         battlecry=Battlecry(Discard(amount=2), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 7, charge=True)\u00a7"}
{"source": 	"Earth Elemental NAME_END 7 ATK_END 8 DEF_END 5 COST_END -1 DUR_END Minion TYPE_END Shaman PLAYER_CLS_END NIL RACE_END Epic RARITY_END <b>Taunt</b>. <b>Overload:</b> (3)", "target": "class EarthElemental(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Earth Elemental\", 5, CHARACTER_CLASS.SHAMAN, CARD_RARITY.EPIC, overload=3)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(7, 8, taunt=True)\u00a7"}
{"source": 	"Explosive Trap NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When your hero is attacked, deal $2 damage to all enemies.", "target": "class ExplosiveTrap(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Explosive Trap\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.COMMON)\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        if isinstance(target, Hero):\u00a7            game = attacker.p	layer.game\u00a7            enemies = copy.copy(game.current_player.minions)\u00a7            enemies.append(game.current_player.hero)\u00a7            for enemy in enemies:\u00a7                enemy.damage(2, None)\u00a7            game.check_delayed()\u00a7            super().reveal()\u00a7"}
{"source": 	"Flame of Azzinoth NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END NIL", "target": "class FlameOfAzzinoth(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Flame of Azzinoth\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": 	"Gnoll NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END NIL RARITY_END <b>Taunt</b>", "target": "class Gnoll(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Gnoll\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, taunt=True)\u00a7"}
{"source": 	"Holy Wrath NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Rare RARITY_END Draw a card and deal damage equal to its cost.", "target": "class HolyWrath(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Holy Wrath\", 5, CHARACTER_CLASS.PALADIN,\u00a7                         CARD_RARITY.RARE, target_func=hearthbreaker.targeting.find_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7\u00a7        fatigue = False\u00a7        if player.deck.left == 0:\u00a7            fatigue = True\u00a7\u00a7        player.draw()\u00a7        if not fatigue:\u00a7            cost = player.hand[-1].mana\u00a7            self.targe	t.damage(player.effective_spell_damage(cost), self)\u00a7"}
{"source": 	"Infernal NAME_END 6 ATK_END 6 DEF_END 6 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END Demon RACE_END Common RARITY_END NIL", "target": "class Infernal(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Infernal\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON, False,\u00a7                         minion_type=MINION_TYPE.DEMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(6, 6)\u00a7"}
{"source": 	"Kirin Tor Mage NAME_END 4 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Battlecry:</b> The next <b>Secret</b> you play this turn costs (0).", "target": "class KirinTorMage(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Kirin Tor Mage\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.RARE,\u00a7                         battlecry=Battlecry(GiveAura([AuraUntil(ManaChange(-100), CardSelector(condition=IsSecret()),\u00a7                                                                 CardPlayed(IsSecret()))]), PlayerSelector()))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(4, 3)\u00a7"}
{"source": 	"Lightwarden NAME_END 1 ATK_END 2 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END Whenever a character is healed, gain +2 Attack.", "target": "class Lightwarden(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Lightwarden\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 2, effects=[Effect(CharacterHealed(player=BothPlayer()),\u00a7                                            ActionTag(Give(ChangeAttack(2)), SelfSelector()))])\u00a7"}
{"source": 	"Mana Wraith NAME_END 2 ATK_END 2 DEF_END 2 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Rare RARITY_END ALL minions cost (1) more.", "target": "class ManaWraith(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Mana Wraith\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.RARE)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 2, auras=[Aura(ManaChange(1), CardSelector(BothPlayer(), IsMinion()))])\u00a7"}
{"source": 	"Misdirection NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Hunter PLAYER_CLS_END NIL RACE_END Rare RARITY_END <b>Secret:</b> When a character attacks your hero, instead he attacks another random character.", "target": "class Misdirection(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Misdirection\", 2, CHARACTER_CLASS.HUNTER, CARD_RARITY.RARE)\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7\u00a7    def _reveal(self, character, target):\u00a7        if isinstance(target, Hero) and not character	.removed:\u00a7            game = character.player.game\u00a7            possibilities = copy.copy(game.current_player.minions)\u00a7            possibilities.extend(game.other_player.minions)\u00a7            possibilities.append(game.current_player.hero)\u00a7            possibilities.append(game.other_player.hero)\u00a7            possibilities.remove(character.current_target)\u00a7            character.current_target = game.random_choice(possibilities)\u00a7\u00a7            super().reveal()\u00a7"}
{"source": 	"Noble Sacrifice NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When an enemy attacks, summon a 2/1 Defender as the new target.", "target": "class NobleSacrifice(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Noble Sacrifice\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, attacker, target):\u00a7        player = attacker.player.game.other_player\u00a7        if len(player.minions) < 7 and not attacker.removed:\u00a7            from hearthbreaker.cards.minions.paladin import DefenderMinion\u00a7            defender = DefenderMinion()\u00a7            defender.summon(player, player.game, len(player.minions))\u00a7            attacker.current_target = player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.opponent.bind(\"character_attack\", self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.opponent.unbind(\"character_attack\", self._reveal)\u00a7"}
{"source": 	"Power of the Wild NAME_END -1 ATK_END -1 DEF_END 2 COST_END -1 DUR_END Spell TYPE_END Druid PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Choose One</b> - Give your minions +1/+1; or Summon a 3/2 Panther.", "target": "class PowerOfTheWild(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Power of the Wild\", 2, CHARACTER_CLASS.DRUID, CARD_RARITY.COMMON)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        option = player.agent.choose_option([LeaderOfThePack(), SummonPanther()], player)\u00a7        option.use(player, game)\u00a7"}
{"source": 	"Redemption NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Secret:</b> When one of your minions dies, return it to life with 1 Health.", "target": "class Redemption(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Redemption\", 1, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON)\u00a7\u00a7    def _reveal(self, minion, by):\u00a7        resurrection = minion.card.summon(minion.player, minion.game, min(minion.index, len(minion.player.minions)))\u00a7        if resurrection:\u00a7            resurrection.health = 1\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.bind(\"minion_died\"	, self._reveal)\u00a7\u00a7    def deactivate(self, player):\u00a7        player.unbind(\"minion_died\", self._reveal)\u00a7"}
{"source": 	"Shadow Madness NAME_END -1 ATK_END -1 DEF_END 4 COST_END -1 DUR_END Spell TYPE_END Priest PLAYER_CLS_END NIL RACE_END Rare RARITY_END Gain control of an enemy minion with 3 or less Attack until end of turn.", "target": "class ShadowMadness(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Shadow Madness\", 4, CHARACTER_CLASS.PRIEST,\u00a7                         CARD_RARITY.RARE,\u00a7                         target_func=hearthbreaker.targeting.find_enemy_minion_spell_target,\u00a7                         filter_func=lambda target: target.calculate_attack() <= 3 and target.spell_targetable())\u00a7\u00a7    def use(self, player, game):\u00a7\u00a7        super().use(player, game)\u00a7\u00a7        m	inion = self.target.copy(player)\u00a7        minion.active = True\u00a7        minion.exhausted = False\u00a7\u00a7        # What happens if there are already 7 minions?\u00a7        self.target.remove_from_board()\u00a7        minion.add_to_board(len(player.minions))\u00a7\u00a7        # When silenced, the minion should immediately come back to its previous\u00a7        # owner.  See https://twitter.com/bdbrode/status/510251195173470208\u00a7        minion.add_buff(BuffUntil(Stolen(), TurnEnded()))\u00a7\u00a7    def can_use(self, player, game):\u00a7        return super().can_use(player, game) and len(player.minions) < 7\u00a7"}
{"source": 	"Siphon Soul NAME_END -1 ATK_END -1 DEF_END 6 COST_END -1 DUR_END Spell TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Rare RARITY_END Destroy a minion. Restore #3 Health to your hero.", "target": "class SiphonSoul(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Siphon Soul\", 6, CHARACTER_CLASS.WARLOCK, CARD_RARITY.RARE,\u00a7                         target_func=hearthbreaker.targeting.find_minion_spell_target)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        self.target.die(self)\u00a7        player.hero.heal(player.effective_heal_power(3), self)\u00a7"}
{"source": 	"Spellbender NAME_END 1 ATK_END 3 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Mage PLAYER_CLS_END NIL RACE_END Epic RARITY_END NIL", "target": "class Spellbender(SecretCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Spellbender\", 3, CHARACTER_CLASS.MAGE, CARD_RARITY.EPIC)\u00a7        self.player = None\u00a7\u00a7    def _reveal(self, card, index):\u00a7        # According to http://us.battle.net/hearthstone/en/forum/topic/10070927066, Spellbender\u00a7        # will not activate if there are too many minions\u00a7        if card.is_spell() and len(self.player.minions) < 7 and card.target and card.target.is_minion():\u00a7            SpellbenderMinion().summon(self.player, self.player.game, len(self.player.minions))\u00a7            card.target = self.player.minions[-1]\u00a7            super().reveal()\u00a7\u00a7    def activate(self, player):\u00a7        player.game.current_player.bind(\"card_played\", self._reveal)\u00a7        self.player = player\u00a7\u00a7    def deactivate(self, player):\u00a7        player.game.current_player.unbind(\"card_played\", self._reveal)\u00a7        self.player = None\u00a7"}
{"source": 	"Summoning Portal NAME_END 0 ATK_END 4 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Warlock PLAYER_CLS_END NIL RACE_END Common RARITY_END Your minions cost (2) less, but not less than (1).", "target": "class SummoningPortal(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Summoning Portal\", 4, CHARACTER_CLASS.WARLOCK, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(0, 4, auras=[Aura(ManaChange(-2, 1, minimum=1), CardSelector(condition=IsMinion()))])\u00a7"}
{"source": 	"Thrallmar Farseer NAME_END 2 ATK_END 3 DEF_END 3 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END <b>Windfury</b>", "target": "class ThrallmarFarseer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Thrallmar Farseer\", 3, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 3, windfury=True)\u00a7"}
{"source": 	"Upgrade! NAME_END -1 ATK_END -1 DEF_END 1 COST_END -1 DUR_END Spell TYPE_END Warrior PLAYER_CLS_END NIL RACE_END Rare RARITY_END If you have a weapon, give it +1/+1. Otherwise equip a 1/3 weapon.", "target": "class Upgrade(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Upgrade!\", 1, CHARACTER_CLASS.WARRIOR, CARD_RARITY.RARE)\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        from hearthbreaker.cards.weapons.warrior import HeavyAxe\u00a7        if player.weapon:\u00a7            player.weapon.durability += 1\u00a7            player.weapon.base_attack += 1\u00a7        else:\u00a7            heavy_axe = HeavyAxe().create_weapon(player)\u00a7            heavy_axe.equip(player)\u00a7"}
{"source": 	"Wisp NAME_END 1 ATK_END 1 DEF_END 0 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END NIL RACE_END Common RARITY_END NIL", "target": "class Wisp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Wisp\", 0, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(1, 1)\u00a7"}
{"source": 	"Black Whelp NAME_END 2 ATK_END 1 DEF_END 1 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END NIL", "target": "class BlackWhelp(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Black Whelp\", 1, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, False, MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(2, 1)\u00a7"}
{"source": 	"Dragonkin Sorcerer NAME_END 3 ATK_END 5 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END Whenever <b>you</b> target this minion with a spell, gain +1/+1.", "target": "class DragonkinSorcerer(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Dragonkin Sorcerer\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON,\u00a7                         minion_type=MINION_TYPE.DRAGON)\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(3, 5, effects=[Effect(SpellTargeted(), [ActionTag(Give([Buff(ChangeAttack(1)),\u00a7                                                                              Buff(ChangeHealth(1))]),\u00a7	SelfSelector())])])\u00a7"}
{"source": 	"Hungry Dragon NAME_END 5 ATK_END 6 DEF_END 4 COST_END -1 DUR_END Minion TYPE_END Neutral PLAYER_CLS_END Dragon RACE_END Common RARITY_END <b>Battlecry:</b> Summon a random 1-Cost minion for your opponent.", "target": "class HungryDragon(MinionCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Hungry Dragon\", 4, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type=MINION_TYPE.DRAGON,\u00a7                         battlecry=(Battlecry(Summon(CollectionSource([ManaCost(1), IsMinion()])),\u00a7                                              PlayerSelector(EnemyPlayer()))))\u00a7\u00a7    def create_minion(self, player):\u00a7        return Minion(5, 6)\u00a7"}
{"source": 	"Solemn Vigil NAME_END -1 ATK_END -1 DEF_END 5 COST_END -1 DUR_END Spell TYPE_END Paladin PLAYER_CLS_END NIL RACE_END Common RARITY_END Draw 2 cards. Costs (1) less for each minion that died this turn.", "target": "class SolemnVigil(SpellCard):\u00a7    def __init__(self):\u00a7        super().__init__(\"Solemn Vigil\", 5, CHARACTER_CLASS.PALADIN, CARD_RARITY.COMMON,\u00a7                         buffs=[Buff(ManaChange(Count(DeadMinionSelector(players=BothPlayer())), -1))])\u00a7\u00a7    def use(self, player, game):\u00a7        super().use(player, game)\u00a7        for n in range(0, 2):\u00a7            player.draw("}